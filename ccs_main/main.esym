D G "__PCH__" 0 1308 ""5.093""
D G "__DEVICE__" 0 1308 "4520"
D G "__DATE__" 0 1308 ""22-Aug-22""
D G "__TIME__" 0 1308 ""12:14:06""
D G "_UNICODE" 0 1308 ""?""
D G "__EVAL" 0 1308 ""?"" "Standard Header file for the PIC18F4520 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
f N "set_tris_a" 2 43 ""
v L "value" 2 43 "int8" `55 
f B "set_tris_a" 2 43 "void(int8 value)" `54 
f N "set_tris_b" 2 44 ""
v L "value" 2 44 "int8" `57 
f B "set_tris_b" 2 44 "void(int8 value)" `56 
f N "set_tris_c" 2 45 ""
v L "value" 2 45 "int8" `59 
f B "set_tris_c" 2 45 "void(int8 value)" `58 
f N "set_tris_d" 2 46 ""
v L "value" 2 46 "int8" `61 
f B "set_tris_d" 2 46 "void(int8 value)" `60 
f N "set_tris_e" 2 47 ""
v L "value" 2 47 "int8" `63 
f B "set_tris_e" 2 47 "void(int8 value)" `62 
f N "get_tris_a" 2 48 ""
f B "get_tris_a" 2 48 "int8()" `64 
f N "get_tris_b" 2 49 ""
f B "get_tris_b" 2 49 "int8()" `65 
f N "get_tris_c" 2 50 ""
f B "get_tris_c" 2 50 "int8()" `66 
f N "get_tris_d" 2 51 ""
f B "get_tris_d" 2 51 "int8()" `67 
f N "get_tris_e" 2 52 ""
f B "get_tris_e" 2 52 "int8()" `68 
f N "output_a" 2 53 ""
v L "value" 2 53 "int8" `70 
f B "output_a" 2 53 "void(int8 value)" `69 
f N "output_b" 2 54 ""
v L "value" 2 54 "int8" `72 
f B "output_b" 2 54 "void(int8 value)" `71 
f N "output_c" 2 55 ""
v L "value" 2 55 "int8" `74 
f B "output_c" 2 55 "void(int8 value)" `73 
f N "output_d" 2 56 ""
v L "value" 2 56 "int8" `76 
f B "output_d" 2 56 "void(int8 value)" `75 
f N "output_e" 2 57 ""
v L "value" 2 57 "int8" `78 
f B "output_e" 2 57 "void(int8 value)" `77 
f N "input_a" 2 58 ""
f B "input_a" 2 58 "int8()" `79 
f N "input_b" 2 59 ""
f B "input_b" 2 59 "int8()" `80 
f N "input_c" 2 60 ""
f B "input_c" 2 60 "int8()" `81 
f N "input_d" 2 61 ""
f B "input_d" 2 61 "int8()" `82 
f N "input_e" 2 62 ""
f B "input_e" 2 62 "int8()" `83 
f N "input_change_a" 2 63 ""
f B "input_change_a" 2 63 "int8()" `84 
f N "input_change_b" 2 64 ""
f B "input_change_b" 2 64 "int8()" `85 
f N "input_change_c" 2 65 ""
f B "input_change_c" 2 65 "int8()" `86 
f N "input_change_d" 2 66 ""
f B "input_change_d" 2 66 "int8()" `87 
f N "input_change_e" 2 67 ""
f B "input_change_e" 2 67 "int8()" `88 
f N "port_b_pullups" 2 68 ""
v L "value" 2 68 "int8" `90 
f B "port_b_pullups" 2 68 "void(int8 value)" `89 
f N "input" 2 69 ""
v L "pin" 2 69 "int16" `92 
f B "input" 2 69 "int8(int16 pin)" `91 
f N "input_state" 2 70 ""
v L "pin" 2 70 "int16" `94 
f B "input_state" 2 70 "int8(int16 pin)" `93 
f N "output_low" 2 71 ""
v L "pin" 2 71 "int16" `96 
f B "output_low" 2 71 "void(int16 pin)" `95 
f N "output_high" 2 72 ""
v L "pin" 2 72 "int16" `98 
f B "output_high" 2 72 "void(int16 pin)" `97 
f N "output_toggle" 2 73 ""
v L "pin" 2 73 "int16" `100 
f B "output_toggle" 2 73 "void(int16 pin)" `99 
f N "output_bit" 2 74 ""
v L "pin" 2 74 "int16" `102 
v L "level" 2 74 "int8" `103 
f B "output_bit" 2 74 "void(int16 pin,int8 level)" `101 
f N "output_float" 2 75 ""
v L "pin" 2 75 "int16" `105 
f B "output_float" 2 75 "void(int16 pin)" `104 
f N "output_drive" 2 76 ""
v L "pin" 2 76 "int16" `107 
f B "output_drive" 2 76 "void(int16 pin)" `106  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 80 "31744"
d G "PIN_A1" 2 81 "31745"
d G "PIN_A2" 2 82 "31746"
d G "PIN_A3" 2 83 "31747"
d G "PIN_A4" 2 84 "31748"
d G "PIN_A5" 2 85 "31749"
d G "PIN_A6" 2 86 "31750"
d G "PIN_A7" 2 87 "31751"
d G "PIN_B0" 2 89 "31752"
d G "PIN_B1" 2 90 "31753"
d G "PIN_B2" 2 91 "31754"
d G "PIN_B3" 2 92 "31755"
d G "PIN_B4" 2 93 "31756"
d G "PIN_B5" 2 94 "31757"
d G "PIN_B6" 2 95 "31758"
d G "PIN_B7" 2 96 "31759"
d G "PIN_C0" 2 98 "31760"
d G "PIN_C1" 2 99 "31761"
d G "PIN_C2" 2 100 "31762"
d G "PIN_C3" 2 101 "31763"
d G "PIN_C4" 2 102 "31764"
d G "PIN_C5" 2 103 "31765"
d G "PIN_C6" 2 104 "31766"
d G "PIN_C7" 2 105 "31767"
d G "PIN_D0" 2 107 "31768"
d G "PIN_D1" 2 108 "31769"
d G "PIN_D2" 2 109 "31770"
d G "PIN_D3" 2 110 "31771"
d G "PIN_D4" 2 111 "31772"
d G "PIN_D5" 2 112 "31773"
d G "PIN_D6" 2 113 "31774"
d G "PIN_D7" 2 114 "31775"
d G "PIN_E0" 2 116 "31776"
d G "PIN_E1" 2 117 "31777"
d G "PIN_E2" 2 118 "31778"
d G "PIN_E3" 2 119 "31779"
d G "FALSE" 2 122 "0"
d G "TRUE" 2 123 "1"
d G "BYTE" 2 125 "int8"
d G "BOOLEAN" 2 126 "int1"
d G "getc" 2 128 "getch"
d G "fgetc" 2 129 "getch"
d G "getchar" 2 130 "getch"
d G "putc" 2 131 "putchar"
d G "fputc" 2 132 "putchar"
d G "fgets" 2 133 "gets"
d G "fputs" 2 134 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f N "restart_cause" 2 139 ""
f B "restart_cause" 2 139 "int8()" `108 
f N "reset_cpu" 2 140 ""
f B "reset_cpu" 2 140 "void()" `109 
f N "sleep" 2 141 ""
f B "sleep" 2 141 "void()" `110 
f N "sleep" 2 142 ""
v L "type" 2 142 "int8" `112 
f B "sleep" 2 142 "void(int8 type)" `111  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 2 144 "7"
d G "MCLR_FROM_SLEEP" 2 145 "11"
d G "MCLR_FROM_RUN" 2 146 "15"
d G "NORMAL_POWER_UP" 2 147 "12"
d G "BROWNOUT_RESTART" 2 148 "14"
d G "WDT_FROM_SLEEP" 2 149 "3"
d G "RESET_INSTRUCTION" 2 150 "0"
d G "SLEEP_FULL" 2 153 "0" "Default"
d G "SLEEP_IDLE" 2 154 "1" "Clock and peripherals don't stop"
c L "sleep" 2 3 5 "FUNCTION"
f N "setup_timer_0" 2 161 ""
v L "mode" 2 161 "int8" `114 
f B "setup_timer_0" 2 161 "void(int8 mode)" `113 
f N "set_timer0" 2 162 ""
v L "value" 2 162 "int16" `116 
f B "set_timer0" 2 162 "void(int16 value)" `115 
f N "get_timer0" 2 163 ""
f B "get_timer0" 2 163 "int16()" `117 
f N "setup_counters" 2 164 ""
v L "mode" 2 164 "int8" `119 
v L "prescaler" 2 164 "int8" `120 
f B "setup_counters" 2 164 "void(int8 mode,int8 prescaler)" `118 
f N "set_rtcc" 2 165 ""
v L "value" 2 165 "int16" `122 
f B "set_rtcc" 2 165 "void(int16 value)" `121 
f N "get_rtcc" 2 166 ""
f B "get_rtcc" 2 166 "int16()" `123  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 168 "0"
d G "T0_EXT_L_TO_H" 2 169 "32"
d G "T0_EXT_H_TO_L" 2 170 "48"
d G "T0_DIV_1" 2 172 "8"
d G "T0_DIV_2" 2 173 "0"
d G "T0_DIV_4" 2 174 "1"
d G "T0_DIV_8" 2 175 "2"
d G "T0_DIV_16" 2 176 "3"
d G "T0_DIV_32" 2 177 "4"
d G "T0_DIV_64" 2 178 "5"
d G "T0_DIV_128" 2 179 "6"
d G "T0_DIV_256" 2 180 "7"
d G "T0_OFF" 2 182 "0x80"
d G "T0_8_BIT" 2 184 "0x40"
d G "RTCC_INTERNAL" 2 188 "0"
d G "RTCC_EXT_L_TO_H" 2 189 "32"
d G "RTCC_EXT_H_TO_L" 2 190 "48"
d G "RTCC_DIV_1" 2 191 "8"
d G "RTCC_DIV_2" 2 192 "0"
d G "RTCC_DIV_4" 2 193 "1"
d G "RTCC_DIV_8" 2 194 "2"
d G "RTCC_DIV_16" 2 195 "3"
d G "RTCC_DIV_32" 2 196 "4"
d G "RTCC_DIV_64" 2 197 "5"
d G "RTCC_DIV_128" 2 198 "6"
d G "RTCC_DIV_256" 2 199 "7"
d G "RTCC_OFF" 2 200 "0x80"
d G "RTCC_8_BIT" 2 201 "0x40"
c L "get_rtcc" 2 3 8 "FUNCTION"
f N "setup_wdt" 2 212 ""
v L "mode" 2 212 "int16" `125 
f B "setup_wdt" 2 212 "void(int16 mode)" `124 
f N "restart_wdt" 2 213 ""
f B "restart_wdt" 2 213 "void()" `126  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 215 "0x100"
d G "WDT_OFF" 2 216 "0"
d G "WDT_4MS" 2 218 "0x300"
d G "WDT_8MS" 2 219 "0x500"
d G "WDT_16MS" 2 220 "0x700"
d G "WDT_32MS" 2 221 "0x900"
d G "WDT_64MS" 2 222 "0xB00"
d G "WDT_128MS" 2 223 "0xD00"
d G "WDT_256MS" 2 224 "0xF00"
d G "WDT_512MS" 2 225 "0x1100"
d G "WDT_1S" 2 226 "0x1300"
d G "WDT_2S" 2 227 "0x1500"
d G "WDT_4S" 2 228 "0x1700"
d G "WDT_8S" 2 229 "0x1900"
d G "WDT_16S" 2 230 "0x1B00"
d G "WDT_32S" 2 231 "0x1D00"
d G "WDT_64S" 2 232 "0x1F00"
d G "WDT_128S" 2 233 "0x2100"
c L "restart_wdt" 2 3 3 "FUNCTION"
f N "setup_timer_1" 2 238 ""
v L "mode" 2 238 "int16" `128 
f B "setup_timer_1" 2 238 "void(int16 mode)" `127 
f N "get_timer1" 2 239 ""
f B "get_timer1" 2 239 "int16()" `129 
f N "set_timer1" 2 240 ""
v L "value" 2 240 "int16" `131 
f B "set_timer1" 2 240 "void(int16 value)" `130  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 243 "0"
d G "T1_INTERNAL" 2 244 "0x85"
d G "T1_EXTERNAL" 2 245 "0x87"
d G "T1_EXTERNAL_SYNC" 2 246 "0x83"
d G "T1_CLK_OUT" 2 248 "8"
d G "T1_DIV_BY_1" 2 250 "0"
d G "T1_DIV_BY_2" 2 251 "0x10"
d G "T1_DIV_BY_4" 2 252 "0x20"
d G "T1_DIV_BY_8" 2 253 "0x30"
c L "set_timer1" 2 3 3 "FUNCTION"
f N "setup_timer_2" 2 258 ""
v L "mode" 2 258 "int8" `133 
v L "period" 2 258 "int8" `134 
v L "postscale" 2 258 "int8" `135 
f B "setup_timer_2" 2 258 "void(int8 mode,int8 period,int8 postscale)" `132 
f N "get_timer2" 2 259 ""
f B "get_timer2" 2 259 "int8()" `136 
f N "set_timer2" 2 260 ""
v L "value" 2 260 "int8" `138 
f B "set_timer2" 2 260 "void(int8 value)" `137  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 262 "0"
d G "T2_DIV_BY_1" 2 263 "4"
d G "T2_DIV_BY_4" 2 264 "5"
d G "T2_DIV_BY_16" 2 265 "6"
c L "set_timer2" 2 3 3 "FUNCTION"
f N "setup_timer_3" 2 270 ""
v L "mode" 2 270 "int16" `140 
f B "setup_timer_3" 2 270 "void(int16 mode)" `139 
f N "get_timer3" 2 271 ""
f B "get_timer3" 2 271 "int16()" `141 
f N "set_timer3" 2 272 ""
v L "value" 2 272 "int16" `143 
f B "set_timer3" 2 272 "void(int16 value)" `142  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 2 275 "0"
d G "T3_INTERNAL" 2 276 "0x85"
d G "T3_EXTERNAL" 2 277 "0x87"
d G "T3_EXTERNAL_SYNC" 2 278 "0x83"
d G "T3_DIV_BY_1" 2 280 "0"
d G "T3_DIV_BY_2" 2 281 "0x10"
d G "T3_DIV_BY_4" 2 282 "0x20"
d G "T3_DIV_BY_8" 2 283 "0x30"
d G "T3_CCP1_TO_2" 2 286 "0x48"
d G "T3_CCP2" 2 287 "0x8"
c L "set_timer3" 2 3 4 "FUNCTION"
f N "setup_ccp1" 2 293 ""
v L "mode" 2 293 "int32" `145 
f B "setup_ccp1" 2 293 "void(int32 mode)" `144 
f N "setup_ccp1" 2 294 ""
v L "mode" 2 294 "int32" `147 
v L "pwm" 2 294 "int8" `148 
f B "setup_ccp1" 2 294 "void(int32 mode,int8 pwm)" `146 
f N "set_pwm1_duty" 2 295 ""
v L "value" 2 295 "int8" `150 
f B "set_pwm1_duty" 2 295 "void(int8 value)" `149 
f N "set_pwm1_duty" 2 296 ""
v L "value" 2 296 "int16" `152 
f B "set_pwm1_duty" 2 296 "void(int16 value)" `151  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 298 "0"
d G "CCP_CAPTURE_FE" 2 299 "0x04"
d G "CCP_CAPTURE_RE" 2 300 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 301 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 302 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 2 303 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 304 "0x09"
d G "CCP_COMPARE_INT" 2 305 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 2 306 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 2 307 "0x0B"
d G "CCP_PWM" 2 308 "0x0C"
d G "CCP_PWM_PLUS_1" 2 309 "0x1c"
d G "CCP_PWM_PLUS_2" 2 310 "0x2c"
d G "CCP_PWM_PLUS_3" 2 311 "0x3c"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
d G "CCP_PWM_H_H" 2 319 "0x0c"
d G "CCP_PWM_H_L" 2 320 "0x0d"
d G "CCP_PWM_L_H" 2 321 "0x0e"
d G "CCP_PWM_L_L" 2 322 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 324 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 325 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 326 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 328 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 329 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 330 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 331 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 332 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 333 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 334 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 336 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 337 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 338 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 340 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 341 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 342 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 344 "0x80000000"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
f N "setup_ccp2" 2 347 ""
v L "mode" 2 347 "int32" `157 
f B "setup_ccp2" 2 347 "void(int32 mode)" `156 
f N "setup_ccp2" 2 348 ""
v L "mode" 2 348 "int32" `159 
v L "pwm" 2 348 "int8" `160 
f B "setup_ccp2" 2 348 "void(int32 mode,int8 pwm)" `158 
f N "set_pwm2_duty" 2 349 ""
v L "value" 2 349 "int8" `162 
f B "set_pwm2_duty" 2 349 "void(int8 value)" `161 
f N "set_pwm2_duty" 2 350 ""
v L "value" 2 350 "int16" `164 
f B "set_pwm2_duty" 2 350 "void(int16 value)" `163 
c L "set_pwm2_duty" 2 3 5 "FUNCTION"
f N "setup_psp" 2 360 ""
v L "mode" 2 360 "int8" `169 
f B "setup_psp" 2 360 "void(int8 mode)" `168 
f N "psp_output_full" 2 361 ""
f B "psp_output_full" 2 361 "int8()" `170 
f N "psp_input_full" 2 362 ""
f B "psp_input_full" 2 362 "int8()" `171 
f N "psp_overflow" 2 363 ""
f B "psp_overflow" 2 363 "int8()" `172  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 2 365 "0x10"
d G "PSP_DISABLED" 2 366 "0"
c L "psp_overflow" 2 3 3 "FUNCTION"
f N "setup_spi" 2 373 ""
v L "mode" 2 373 "int32" `175 
f B "setup_spi" 2 373 "void(int32 mode)" `174 
f N "spi_write" 2 374 ""
v L "value" 2 374 "int8" `177 
f B "spi_write" 2 374 "void(int8 value)" `176 
f N "spi_write" 2 375 ""
v L "wait" 2 375 "int8" `179 
v L "value" 2 375 "int8" `180 
f B "spi_write" 2 375 "void(int8 wait,int8 value)" `178 
f N "spi_read" 2 376 ""
f B "spi_read" 2 376 "int8()" `181 
f N "spi_read" 2 377 ""
v L "value" 2 377 "int8" `183 
f B "spi_read" 2 377 "int8(int8 value)" `182 
f N "spi_data_is_in" 2 378 ""
f B "spi_data_is_in" 2 378 "int8()" `184 
f N "setup_spi2" 2 379 ""
v L "mode" 2 379 "int32" `186 
f B "setup_spi2" 2 379 "void(int32 mode)" `185 
f N "spi_write2" 2 380 ""
v L "value" 2 380 "int8" `188 
f B "spi_write2" 2 380 "void(int8 value)" `187 
f N "spi_read2" 2 381 ""
f B "spi_read2" 2 381 "int8()" `189 
f N "spi_read2" 2 382 ""
v L "value" 2 382 "int8" `191 
f B "spi_read2" 2 382 "int8(int8 value)" `190 
f N "spi_data_is_in2" 2 383 ""
f B "spi_data_is_in2" 2 383 "int8()" `192  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 385 "0x00"
d G "SPI_MASTER" 2 386 "0x20"
d G "SPI_SLAVE" 2 387 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 388 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 389 "0x00"
d G "SPI_CLK_DIV_4" 2 390 "0x00"
d G "SPI_CLK_DIV_16" 2 391 "0x01"
d G "SPI_CLK_DIV_64" 2 392 "0x02"
d G "SPI_CLK_T2" 2 393 "0x03"
d G "SPI_SS_DISABLED" 2 394 "0x01"
d G "SPI_XMIT_L_TO_H" 2 396 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 397 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 399 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 400 "0x8000"
d G "SPI_L_TO_H" 2 403 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 404 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in2" 2 3 2 "FUNCTION"
f N "setup_uart" 2 408 ""
v L "baud" 2 408 "int32" `194 
f B "setup_uart" 2 408 "void(int32 baud)" `193 
f N "setup_uart" 2 409 ""
v L "baud" 2 409 "int32" `196 
v L "stream" 2 409 "int8" `197 
f B "setup_uart" 2 409 "void(int32 baud,int8 stream)" `195 
f N "setup_uart" 2 410 ""
v L "baud" 2 410 "int32" `199 
v L "stream" 2 410 "int8" `200 
v L "clock" 2 410 "int32" `201 
f B "setup_uart" 2 410 "void(int32 baud,int8 stream,int32 clock)" `198 
f N "set_uart_speed" 2 411 ""
v L "baud" 2 411 "int32" `203 
f B "set_uart_speed" 2 411 "void(int32 baud)" `202 
f N "set_uart_speed" 2 412 ""
v L "baud" 2 412 "int32" `205 
v L "stream" 2 412 "int8" `206 
f B "set_uart_speed" 2 412 "void(int32 baud,int8 stream)" `204 
f N "set_uart_speed" 2 413 ""
v L "baud" 2 413 "int32" `208 
v L "stream" 2 413 "int8" `209 
v L "clock" 2 413 "int32" `210 
f B "set_uart_speed" 2 413 "void(int32 baud,int8 stream,int32 clock)" `207  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 417 "2"
d G "UART_DATA" 2 418 "4"
d G "UART_AUTODETECT" 2 419 "8"
d G "UART_AUTODETECT_NOWAIT" 2 420 "9"
d G "UART_WAKEUP_ON_RDA" 2 421 "10"
d G "UART_SEND_BREAK" 2 422 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
f N "setup_comparator" 2 427 ""
v L "mode" 2 427 "int32" `212 
f B "setup_comparator" 2 427 "void(int32 mode)" `211  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A3" 2 429 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 2 430 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 2 431 "0xbcf05"
d G "NC_NC_NC_NC" 2 432 "0x0ff07"
d G "A0_A3_A1_A2" 2 433 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 2 434 "0x9ef01"
d G "A0_VR_A1_VR" 2 435 "0x3ff06"
d G "A3_VR_A2_VR" 2 436 "0xcff0e"
d G "CP1_INVERT" 2 437 "0x0000010"
d G "CP2_INVERT" 2 438 "0x0000020"
c L "setup_comparator" 2 3 2 "FUNCTION"
f N "setup_vref" 2 445 ""
v L "mode" 2 445 "int8" `216 
f B "setup_vref" 2 445 "void(int8 mode)" `215  "Constants used in setup_vref() are:"
d G "VREF_LOW" 2 447 "0xa0"
d G "VREF_HIGH" 2 448 "0x80"
d G "VREF_F5" 2 450 "0x40"
d G "VREF_COMP" 2 451 "0x10"
c L "setup_vref" 2 3 2 "FUNCTION"
f N "setup_low_volt_detect" 2 455 ""
v L "mode" 2 455 "int8" `218 
f B "setup_low_volt_detect" 2 455 "void(int8 mode)" `217  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 2 457 "0x1F"
d G "LVD_45" 2 458 "0x1E"
d G "LVD_42" 2 459 "0x1D"
d G "LVD_40" 2 460 "0x1C"
d G "LVD_38" 2 461 "0x1B"
d G "LVD_36" 2 462 "0x1A"
d G "LVD_35" 2 463 "0x19"
d G "LVD_33" 2 464 "0x18"
d G "LVD_30" 2 465 "0x17"
d G "LVD_28" 2 466 "0x16"
d G "LVD_27" 2 467 "0x15"
d G "LVD_25" 2 468 "0x14"
d G "LVD_24" 2 469 "0x13"
d G "LVD_23" 2 470 "0x12"
d G "LVD_22" 2 471 "0x11"
d G "LVD_21" 2 472 "0x10"
d G "LVD_TRIGGER_BELOW" 2 474 "0"
d G "LVD_TRIGGER_ABOVE" 2 475 "0x80"
c L "setup_low_volt_detect" 2 3 2 "FUNCTION"
f N "setup_oscillator" 2 480 ""
v L "mode" 2 480 "int8" `220 
f B "setup_oscillator" 2 480 "int8(int8 mode)" `219 
f N "setup_oscillator" 2 481 ""
v L "mode" 2 481 "int8" `222 
v L "tune" 2 481 "sint8" `223 
f B "setup_oscillator" 2 481 "int8(int8 mode,sint8 tune)" `221  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 484 "0"
d G "OSC_125KHZ" 2 485 "0x10"
d G "OSC_250KHZ" 2 486 "0x20"
d G "OSC_500KHZ" 2 487 "0x30"
d G "OSC_1MHZ" 2 488 "0x40"
d G "OSC_2MHZ" 2 489 "0x50"
d G "OSC_4MHZ" 2 490 "0x60"
d G "OSC_8MHZ" 2 491 "0x70"
d G "OSC_16MHZ" 2 492 "0x4060"
d G "OSC_32MHZ" 2 493 "0x4070"
d G "OSC_TIMER1" 2 495 "1"
d G "OSC_INTRC" 2 496 "2"
d G "OSC_NORMAL" 2 497 "0"
d G "OSC_IDLE_MODE" 2 499 "0x80"
d G "OSC_31250" 2 500 "0x8000"
d G "OSC_PLL_ON" 2 501 "0x4000"
d G "OSC_PLL_OFF" 2 502 "0"
d G "OSC_STATE_STABLE" 2 506 "4"
d G "OSC_STATE_EXT_RUNNING" 2 507 "8"
c L "setup_oscillator" 2 3 4 "FUNCTION"
f N "setup_adc" 2 514 ""
v L "mode" 2 514 "int16" `225 
f B "setup_adc" 2 514 "void(int16 mode)" `224 
f N "read_adc" 2 515 ""
f B "read_adc" 2 515 "int8()" `226 
f N "read_adc" 2 516 ""
v L "mode" 2 516 "int8" `228 
f B "read_adc" 2 516 "int8(int8 mode)" `227 
f N "read_adc" 2 517 ""
f G "read_adc" 2 517 "int16()" `229 
f N "read_adc" 2 518 ""
v L "mode" 2 518 "int8" `230 
f G "read_adc" 2 518 "int16(int8 mode,int8 pins)" `229 
f N "adc_done" 2 519 ""
f B "adc_done" 2 519 "int8(int8 mode,int8 pins)" `229  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 521 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 522 "0x100"
d G "ADC_CLOCK_DIV_4" 2 523 "0x04"
d G "ADC_CLOCK_DIV_8" 2 524 "0x01"
d G "ADC_CLOCK_DIV_16" 2 525 "0x05"
d G "ADC_CLOCK_DIV_32" 2 526 "0x02"
d G "ADC_CLOCK_DIV_64" 2 527 "0x06"
d G "ADC_CLOCK_INTERNAL" 2 528 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 2 530 "0x00"
d G "ADC_TAD_MUL_2" 2 531 "0x08"
d G "ADC_TAD_MUL_4" 2 532 "0x10"
d G "ADC_TAD_MUL_6" 2 533 "0x18"
d G "ADC_TAD_MUL_8" 2 534 "0x20"
d G "ADC_TAD_MUL_12" 2 535 "0x28"
d G "ADC_TAD_MUL_16" 2 536 "0x30"
d G "ADC_TAD_MUL_20" 2 537 "0x38"
c L "adc_done" 2 3 1 "FUNCTION"
f N "setup_adc_ports" 2 540 ""
v L "pins" 2 540 "int8" `231 
f B "setup_adc_ports" 2 540 "void(int8 pins)" `230 
f N "setup_adc_ports" 2 541 ""
v L "pins" 2 541 "int8" `233 
v L "reference" 2 541 "int8" `234 
f B "setup_adc_ports" 2 541 "void(int8 pins,int8 reference)" `232 
f N "set_analog_pins" 2 542 ""
v L "pins" 2 542 "int8" `236 
f B "set_analog_pins" 2 542 "void(int8 pins)" `235 
f N "set_analog_pins" 2 543 ""
v L "pins" 2 543 "int8" `238 
v L "reference" 2 543 "int8" `239 
f B "set_analog_pins" 2 543 "void(int8 pins,int8 reference)" `237 
f N "set_adc_channel" 2 544 ""
v L "channel" 2 544 "int8" `241 
f B "set_adc_channel" 2 544 "void(int8 channel)" `240  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "NO_ANALOGS" 2 547 "0x0F" "None"
d G "ALL_ANALOG" 2 548 "0x00" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4 B0"
d G "AN0_TO_AN11" 2 549 "0x03" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4"
d G "AN0_TO_AN10" 2 550 "0x04" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1"
d G "AN0_TO_AN9" 2 551 "0x05" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3"
d G "AN0_TO_AN8" 2 552 "0x06" "A0 A1 A2 A3 A5 E0 E1 E2 B2"
d G "AN0_TO_AN7" 2 553 "0x07" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_TO_AN6" 2 554 "0x08" "A0 A1 A2 A3 A5 E0 E1"
d G "AN0_TO_AN5" 2 555 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_TO_AN4" 2 556 "0x0A" "A0 A1 A2 A3 A5"
d G "AN0_TO_AN3" 2 557 "0x0B" "A0 A1 A2 A3"
d G "AN0_TO_AN2" 2 558 "0x0C" "A0 A1 A2"
d G "AN0_TO_AN1" 2 559 "0x0D" "A0 A1"
d G "AN0" 2 560 "0x0E" "A0"
d G "AN0_TO_AN11_ANALOG" 2 561 "0x03" "!old only provided for compatibility"
d G "AN0_TO_AN10_ANALOG" 2 562 "0x04" "!old only provided for compatibility"
d G "AN0_TO_AN9_ANALOG" 2 563 "0x05" "!old only provided for compatibility"
d G "AN0_TO_AN8_ANALOG" 2 564 "0x06" "!old only provided for compatibility"
d G "AN0_TO_AN7_ANALOG" 2 565 "0x07" "!old only provided for compatibility"
d G "AN0_TO_AN6_ANALOG" 2 566 "0x08" "!old only provided for compatibility"
d G "AN0_TO_AN5_ANALOG" 2 567 "0x09" "!old only provided for compatibility"
d G "AN0_TO_AN4_ANALOG" 2 568 "0x0A" "!old only provided for compatibility"
d G "AN0_TO_AN3_ANALOG" 2 569 "0x0B" "!old only provided for compatibility"
d G "AN0_TO_AN2_ANALOG" 2 570 "0x0C" "!old only provided for compatibility"
d G "AN0_TO_AN1_ANALOG" 2 571 "0x0D" "!old only provided for compatibility"
d G "AN0_ANALOG" 2 572 "0x0E" "!old only provided for compatibility"
d G "VSS_VDD" 2 575 "0x00" "Range 0-Vdd"
d G "VREF_VREF" 2 576 "0x30" "Range VrefL-VrefH"
d G "VREF_VDD" 2 577 "0x20" "Range VrefL-Vdd"
d G "VSS_VREF" 2 578 "0x10" "Range 0-VrefH"
d G "ADC_START_AND_READ" 2 581 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 582 "1"
d G "ADC_READ_ONLY" 2 583 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
f N "abs" 2 589 ""
v L "x" 2 589 "sint8" `243 
f B "abs" 2 589 "sint8(sint8 x)" `242 
f N "abs" 2 590 ""
v L "x" 2 590 "sint16" `245 
f B "abs" 2 590 "sint16(sint16 x)" `244 
f N "abs" 2 591 ""
v L "x" 2 591 "sint32" `247 
f B "abs" 2 591 "sint32(sint32 x)" `246 
f N "abs" 2 592 ""
v L "x" 2 592 "float" `249 
f B "abs" 2 592 "float(float x)" `248 
f N "_mul" 2 593 ""
v L "??65535" 2 593 "int8" `251 
v L "??65535" 2 593 "int8" `252 
f B "_mul" 2 593 "int16(int8 ,int8 )" `250 
f N "_mul" 2 594 ""
v L "??65535" 2 594 "sint8" `254 
v L "??65535" 2 594 "sint8" `255 
f B "_mul" 2 594 "sint16(sint8 ,sint8 )" `253 
f N "_mul" 2 595 ""
v L "??65535" 2 595 "int16" `257 
v L "??65535" 2 595 "int16" `258 
f B "_mul" 2 595 "int32(int16 ,int16 )" `256 
f N "_mul" 2 596 ""
v L "??65535" 2 596 "sint16" `260 
v L "??65535" 2 596 "sint16" `261 
f B "_mul" 2 596 "sint32(sint16 ,sint16 )" `259  "Memory Manipulation Prototypes:"
f N "read_bank" 2 599 ""
v L "bank" 2 599 "int8" `263 
v L "offset" 2 599 "int8" `264 
f B "read_bank" 2 599 "int8(int8 bank,int8 offset)" `262 
f N "write_bank" 2 600 ""
v L "bank" 2 600 "int8" `266 
v L "offset" 2 600 "int8" `267 
v L "value" 2 600 "int8" `268 
f B "write_bank" 2 600 "void(int8 bank,int8 offset,int8 value)" `265 
f N "strcpy" 2 601 ""
v L "dest" 2 601 "*int8" `270 
v L "src" 2 601 "*int8" `271 
f B "strcpy" 2 601 "void(*int8 dest,*int8 src)" `269 
f N "memset" 2 602 ""
v L "destination" 2 602 "*int8" `273 
v L "value" 2 602 "int8" `274 
v L "num" 2 602 "int16" `275 
f B "memset" 2 602 "void(*int8 destination,int8 value,int16 num)" `272 
f N "memcpy" 2 603 ""
v L "destination" 2 603 "*int8" `277 
v L "source" 2 603 "*int8" `278 
v L "num" 2 603 "int16" `279 
f B "memcpy" 2 603 "void(*int8 destination,*int8 source,int16 num)" `276  "String Prototypes:"
f N "toupper" 2 606 ""
v L "cvalue" 2 606 "int8" `281 
f B "toupper" 2 606 "int8(int8 cvalue)" `280 
f N "tolower" 2 607 ""
v L "cvalue" 2 607 "int8" `283 
f B "tolower" 2 607 "int8(int8 cvalue)" `282 
f N "sprintf" 2 608 ""
v L "string" 2 608 "*int8" `285 
v L "cstring" 2 608 "*int8" `286 
f B "sprintf" 2 608 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `284  "Data Manipulators Prototypes:"
f N "shift_left" 2 611 ""
v L "address" 2 611 "*int8" `289 
v L "bytes" 2 611 "int8" `290 
v L "value" 2 611 "int8" `291 
f B "shift_left" 2 611 "int8(*int8 address,int8 bytes,int8 value)" `288 
f N "shift_right" 2 612 ""
v L "address" 2 612 "*int8" `293 
v L "bytes" 2 612 "int8" `294 
v L "value" 2 612 "int8" `295 
f B "shift_right" 2 612 "int8(*int8 address,int8 bytes,int8 value)" `292 
f N "rotate_left" 2 613 ""
v L "address" 2 613 "*int8" `297 
v L "bytes" 2 613 "int8" `298 
f B "rotate_left" 2 613 "void(*int8 address,int8 bytes)" `296 
f N "rotate_right" 2 614 ""
v L "address" 2 614 "*int8" `300 
v L "bytes" 2 614 "int8" `301 
f B "rotate_right" 2 614 "void(*int8 address,int8 bytes)" `299 
f N "swap" 2 615 ""
v L "value" 2 615 "int8" `303 
f B "swap" 2 615 "void(int8 value)" `302 
f N "make8" 2 616 ""
v L "var" 2 616 "int16" `305 
v L "offset" 2 616 "int8" `306 
f B "make8" 2 616 "int8(int16 var,int8 offset)" `304 
f N "make8" 2 617 ""
v L "var" 2 617 "int32" `308 
v L "offset" 2 617 "int8" `309 
f B "make8" 2 617 "int8(int32 var,int8 offset)" `307 
f N "make16" 2 618 ""
v L "varhigh" 2 618 "int8" `311 
v L "varlow" 2 618 "int8" `312 
f B "make16" 2 618 "int16(int8 varhigh,int8 varlow)" `310 
f N "make32" 2 619 ""
v L "var1" 2 619 "int16" `314 
f B "make32" 2 619 "int32(int16 var1)" `313 
f N "make32" 2 620 ""
v L "var1" 2 620 "int16" `316 
v L "var2" 2 620 "int16" `317 
f B "make32" 2 620 "int32(int16 var1,int16 var2)" `315 
f N "make32" 2 621 ""
v L "var1" 2 621 "int16" `319 
v L "var2" 2 621 "int8" `320 
f B "make32" 2 621 "int32(int16 var1,int8 var2)" `318 
f N "make32" 2 622 ""
v L "var1" 2 622 "int16" `322 
v L "var2" 2 622 "int8" `323 
v L "var3" 2 622 "int8" `324 
f B "make32" 2 622 "int32(int16 var1,int8 var2,int8 var3)" `321 
f N "make32" 2 623 ""
v L "var1" 2 623 "int8" `326 
f B "make32" 2 623 "int32(int8 var1)" `325 
f N "make32" 2 624 ""
v L "var1" 2 624 "int8" `328 
v L "var2" 2 624 "int8" `329 
f B "make32" 2 624 "int32(int8 var1,int8 var2)" `327 
f N "make32" 2 625 ""
v L "var1" 2 625 "int8" `331 
v L "var2" 2 625 "int8" `332 
v L "var3" 2 625 "int8" `333 
f B "make32" 2 625 "int32(int8 var1,int8 var2,int8 var3)" `330 
f N "make32" 2 626 ""
v L "var1" 2 626 "int8" `335 
v L "var2" 2 626 "int8" `336 
v L "var3" 2 626 "int8" `337 
v L "var4" 2 626 "int8" `338 
f B "make32" 2 626 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `334 
f N "make32" 2 627 ""
v L "var1" 2 627 "int8" `340 
v L "var2" 2 627 "int16" `341 
f B "make32" 2 627 "int32(int8 var1,int16 var2)" `339 
f N "make32" 2 628 ""
v L "var1" 2 628 "int8" `343 
v L "var2" 2 628 "int16" `344 
v L "var3" 2 628 "int8" `345 
f B "make32" 2 628 "int32(int8 var1,int16 var2,int8 var3)" `342 
f N "make32" 2 629 ""
v L "var1" 2 629 "int8" `347 
v L "var2" 2 629 "int8" `348 
v L "var3" 2 629 "int16" `349 
f B "make32" 2 629 "int32(int8 var1,int8 var2,int16 var3)" `346 
f N "bit_set" 2 630 ""
v L "var" 2 630 "int8" `351 
v L "bit" 2 630 "int8" `352 
f B "bit_set" 2 630 "void(int8 var,int8 bit)" `350 
f N "bit_set" 2 631 ""
v L "var" 2 631 "int16" `354 
v L "bit" 2 631 "int8" `355 
f B "bit_set" 2 631 "void(int16 var,int8 bit)" `353 
f N "bit_set" 2 632 ""
v L "var" 2 632 "int32" `357 
v L "bit" 2 632 "int8" `358 
f B "bit_set" 2 632 "void(int32 var,int8 bit)" `356 
f N "bit_clear" 2 633 ""
v L "var" 2 633 "int8" `360 
v L "bit" 2 633 "int8" `361 
f B "bit_clear" 2 633 "void(int8 var,int8 bit)" `359 
f N "bit_clear" 2 634 ""
v L "var" 2 634 "int16" `363 
v L "bit" 2 634 "int8" `364 
f B "bit_clear" 2 634 "void(int16 var,int8 bit)" `362 
f N "bit_clear" 2 635 ""
v L "var" 2 635 "int32" `366 
v L "bit" 2 635 "int8" `367 
f B "bit_clear" 2 635 "void(int32 var,int8 bit)" `365 
f N "bit_test" 2 636 ""
v L "var" 2 636 "int8" `369 
v L "bit" 2 636 "int8" `370 
f B "bit_test" 2 636 "int8(int8 var,int8 bit)" `368 
f N "bit_test" 2 637 ""
v L "var" 2 637 "int16" `372 
v L "bit" 2 637 "int8" `373 
f B "bit_test" 2 637 "int8(int16 var,int8 bit)" `371 
f N "bit_test" 2 638 ""
v L "var" 2 638 "int32" `375 
v L "bit" 2 638 "int8" `376 
f B "bit_test" 2 638 "int8(int32 var,int8 bit)" `374  "#use delay() Prototypes:"
f N "delay_cycles" 2 641 ""
v L "count" 2 641 "int8" `378 
f B "delay_cycles" 2 641 "void(int8 count)" `377 
f N "delay_ms" 2 642 ""
v L "time" 2 642 "int16" `380 
f B "delay_ms" 2 642 "void(int16 time)" `379 
f N "delay_us" 2 643 ""
v L "time" 2 643 "int16" `382 
f B "delay_us" 2 643 "void(int16 time)" `381  "#use rs232() Prototypes:"
f N "putchar" 2 646 ""
v L "cdata" 2 646 "int8" `384 
f B "putchar" 2 646 "void(int8 cdata)" `383 
f N "putchar" 2 647 ""
v L "cdata" 2 647 "int8" `386 
v L "stream" 2 647 "int8" `387 
f B "putchar" 2 647 "void(int8 cdata,int8 stream)" `385 
f N "puts" 2 648 ""
v L "string" 2 648 "*int8" `389 
f B "puts" 2 648 "void(*int8 string)" `388 
f N "puts" 2 649 ""
v L "string" 2 649 "*int8" `391 
v L "stream" 2 649 "int8" `392 
f B "puts" 2 649 "void(*int8 string,int8 stream)" `390 
f N "getch" 2 650 ""
f B "getch" 2 650 "int8()" `393 
f N "getch" 2 651 ""
v L "stream" 2 651 "int8" `395 
f B "getch" 2 651 "int8(int8 stream)" `394 
f N "gets" 2 652 ""
v L "string" 2 652 "*int8" `397 
f B "gets" 2 652 "void(*int8 string)" `396 
f N "gets" 2 653 ""
v L "string" 2 653 "*int8" `399 
v L "stream" 2 653 "int8" `400 
f B "gets" 2 653 "void(*int8 string,int8 stream)" `398 
f N "kbhit" 2 654 ""
f B "kbhit" 2 654 "int8()" `401 
f N "kbhit" 2 655 ""
v L "stream" 2 655 "int8" `403 
f B "kbhit" 2 655 "int8(int8 stream)" `402 
f N "printf" 2 656 ""
v L "string" 2 656 "*int8" `405 
f B "printf" 2 656 "void(*int8 string,*int8 _VA_LIST)" `404 
f N "fprintf" 2 657 ""
v L "stream" 2 657 "int8" `408 
v L "string" 2 657 "*int8" `409 
f B "fprintf" 2 657 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `407 
f N "putc_send" 2 658 ""
f B "putc_send" 2 658 "void()" `411 
f N "fputc_send" 2 659 ""
v L "stream" 2 659 "int8" `413 
f B "fputc_send" 2 659 "void(int8 stream)" `412 
f N "rcv_buffer_full" 2 660 ""
f B "rcv_buffer_full" 2 660 "int8()" `414 
f N "rcv_buffer_full" 2 661 ""
v L "stream" 2 661 "int8" `416 
f B "rcv_buffer_full" 2 661 "int8(int8 stream)" `415 
f N "rcv_buffer_bytes" 2 662 ""
f B "rcv_buffer_bytes" 2 662 "int16()" `417 
f N "rcv_buffer_bytes" 2 663 ""
v L "stream" 2 663 "int8" `419 
f B "rcv_buffer_bytes" 2 663 "int16(int8 stream)" `418 
f N "tx_buffer_full" 2 664 ""
f B "tx_buffer_full" 2 664 "int8()" `420 
f N "tx_buffer_full" 2 665 ""
v L "stream" 2 665 "int8" `422 
f B "tx_buffer_full" 2 665 "int8(int8 stream)" `421 
f N "tx_buffer_bytes" 2 666 ""
f B "tx_buffer_bytes" 2 666 "int16()" `423 
f N "tx_buffer_bytes" 2 667 ""
v L "stream" 2 667 "int8" `425 
f B "tx_buffer_bytes" 2 667 "int16(int8 stream)" `424  "#use i2c() Prototypes:"
f N "i2c_read" 2 670 ""
f B "i2c_read" 2 670 "int8()" `426 
f N "i2c_read" 2 671 ""
v L "ack" 2 671 "int8" `428 
f B "i2c_read" 2 671 "int8(int8 ack)" `427 
f N "i2c_read" 2 672 ""
v L "stream" 2 672 "int8" `430 
v L "ack" 2 672 "int8" `431 
f B "i2c_read" 2 672 "int8(int8 stream,int8 ack)" `429 
f N "i2c_write" 2 673 ""
v L "data" 2 673 "int8" `433 
f B "i2c_write" 2 673 "int8(int8 data)" `432 
f N "i2c_write" 2 674 ""
v L "stream" 2 674 "int8" `435 
v L "data" 2 674 "int8" `436 
f B "i2c_write" 2 674 "int8(int8 stream,int8 data)" `434 
f N "i2c_start" 2 675 ""
f B "i2c_start" 2 675 "void()" `437 
f N "i2c_start" 2 676 ""
v L "stream" 2 676 "int8" `439 
f B "i2c_start" 2 676 "void(int8 stream)" `438 
f N "i2c_start" 2 677 ""
v L "stream" 2 677 "int8" `441 
v L "restart" 2 677 "int8" `442 
f B "i2c_start" 2 677 "void(int8 stream,int8 restart)" `440 
f N "i2c_stop" 2 678 ""
f B "i2c_stop" 2 678 "void()" `443 
f N "i2c_stop" 2 679 ""
v L "stream" 2 679 "int8" `445 
f B "i2c_stop" 2 679 "void(int8 stream)" `444 
f N "i2c_isr_state" 2 680 ""
f B "i2c_isr_state" 2 680 "int8()" `446 
f N "i2c_slaveaddr" 2 681 ""
v L "addr" 2 681 "int8" `448 
f B "i2c_slaveaddr" 2 681 "void(int8 addr)" `447 
f N "i2c_slaveaddr" 2 682 ""
v L "stream" 2 682 "int8" `450 
v L "addr" 2 682 "int8" `451 
f B "i2c_slaveaddr" 2 682 "void(int8 stream,int8 addr)" `449 
f N "i2c_poll" 2 683 ""
f B "i2c_poll" 2 683 "int8()" `452 
f N "i2c_poll" 2 684 ""
v L "stream" 2 684 "int8" `454 
f B "i2c_poll" 2 684 "int8(int8 stream)" `453 
f N "i2c_init" 2 685 ""
v L "baud" 2 685 "int32" `456 
f B "i2c_init" 2 685 "void(int32 baud)" `455 
f N "i2c_init" 2 686 ""
v L "stream" 2 686 "int8" `458 
v L "baud" 2 686 "int32" `459 
f B "i2c_init" 2 686 "void(int8 stream,int32 baud)" `457 
f N "i2c_transfer" 2 687 ""
v L "address" 2 687 "int8" `461 
v L "wData" 2 687 "*int8" `462 
v L "wCount" 2 687 "int8" `463 
f B "i2c_transfer" 2 687 "int8(int8 address,*int8 wData,int8 wCount)" `460 
f N "i2c_transfer" 2 688 ""
v L "address" 2 688 "int8" `465 
v L "wData" 2 688 "*int8" `466 
v L "wCount" 2 688 "int8" `467 
v L "rData" 2 688 "*int8" `468 
v L "rCount" 2 688 "*int8" `469 
f B "i2c_transfer" 2 688 "int8(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `464 
f N "i2c_transfer" 2 689 ""
v L "stream" 2 689 "int8" `471 
v L "address" 2 689 "int8" `472 
v L "wData" 2 689 "*int8" `473 
v L "wCount" 2 689 "int8" `474 
f B "i2c_transfer" 2 689 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `470 
f N "i2c_transfer" 2 690 ""
v L "stream" 2 690 "int8" `476 
v L "address" 2 690 "int8" `477 
v L "wData" 2 690 "*int8" `478 
v L "wCount" 2 690 "int8" `479 
v L "rData" 2 690 "*int8" `480 
v L "rCount" 2 690 "*int8" `481 
f B "i2c_transfer" 2 690 "int8(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `475 
f N "i2c_transfer_out" 2 691 ""
v L "address" 2 691 "int8" `483 
v L "wData" 2 691 "*int8" `484 
v L "wCount" 2 691 "int8" `485 
f B "i2c_transfer_out" 2 691 "int8(int8 address,*int8 wData,int8 wCount)" `482 
f N "i2c_transfer_out" 2 692 ""
v L "stream" 2 692 "int8" `487 
v L "address" 2 692 "int8" `488 
v L "wData" 2 692 "*int8" `489 
v L "wCount" 2 692 "int8" `490 
f B "i2c_transfer_out" 2 692 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `486 
f N "i2c_transfer_in" 2 693 ""
v L "address" 2 693 "int8" `492 
v L "rData" 2 693 "*int8" `493 
v L "rCount" 2 693 "int8" `494 
f B "i2c_transfer_in" 2 693 "int8(int8 address,*int8 rData,int8 rCount)" `491 
f N "i2c_transfer_in" 2 694 ""
v L "stream" 2 694 "int8" `496 
v L "address" 2 694 "int8" `497 
v L "rData" 2 694 "*int8" `498 
v L "rCount" 2 694 "int8" `499 
f B "i2c_transfer_in" 2 694 "int8(int8 stream,int8 address,*int8 rData,int8 rCount)" `495  "#use spi() Prototypes:"
f N "spi_xfer" 2 697 ""
f B "spi_xfer" 2 697 "int8()" `500 
f N "spi_xfer" 2 698 ""
f G "spi_xfer" 2 698 "int16(int8 data)" `501 
f N "spi_xfer" 2 699 ""
f G "spi_xfer" 2 699 "int32(int8 data)" `501 
f N "spi_xfer" 2 700 ""
v L "data" 2 700 "int8" `502 
f B "spi_xfer" 2 700 "int8(int8 data)" `501 
f N "spi_xfer" 2 701 ""
v L "data" 2 701 "int16" `504 
f B "spi_xfer" 2 701 "int16(int16 data)" `503 
f N "spi_xfer" 2 702 ""
v L "data" 2 702 "int32" `506 
f B "spi_xfer" 2 702 "int32(int32 data)" `505 
f N "spi_xfer" 2 703 ""
v L "stream" 2 703 "int8" `508 
v L "data" 2 703 "int8" `509 
f B "spi_xfer" 2 703 "int8(int8 stream,int8 data)" `507 
f N "spi_xfer" 2 704 ""
v L "stream" 2 704 "int8" `511 
v L "data" 2 704 "int16" `512 
f B "spi_xfer" 2 704 "int16(int8 stream,int16 data)" `510 
f N "spi_xfer" 2 705 ""
v L "stream" 2 705 "int8" `514 
v L "data" 2 705 "int32" `515 
f B "spi_xfer" 2 705 "int32(int8 stream,int32 data)" `513 
f N "spi_xfer" 2 706 ""
v L "stream" 2 706 "int8" `517 
v L "data" 2 706 "int8" `518 
v L "bits" 2 706 "int8" `519 
f B "spi_xfer" 2 706 "int8(int8 stream,int8 data,int8 bits)" `516 
f N "spi_xfer" 2 707 ""
v L "stream" 2 707 "int8" `521 
v L "data" 2 707 "int16" `522 
v L "bits" 2 707 "int8" `523 
f B "spi_xfer" 2 707 "int16(int8 stream,int16 data,int8 bits)" `520 
f N "spi_xfer" 2 708 ""
v L "stream" 2 708 "int8" `525 
v L "data" 2 708 "int32" `526 
v L "bits" 2 708 "int8" `527 
f B "spi_xfer" 2 708 "int32(int8 stream,int32 data,int8 bits)" `524 
f N "spi_init" 2 709 ""
v L "baud" 2 709 "int32" `529 
f B "spi_init" 2 709 "void(int32 baud)" `528 
f N "spi_init" 2 710 ""
v L "stream" 2 710 "int8" `531 
v L "baud" 2 710 "int32" `532 
f B "spi_init" 2 710 "void(int8 stream,int32 baud)" `530 
f N "spi_speed" 2 711 ""
v L "baud" 2 711 "int32" `534 
f B "spi_speed" 2 711 "void(int32 baud)" `533 
f N "spi_speed" 2 712 ""
v L "stream" 2 712 "int8" `536 
v L "baud" 2 712 "int32" `537 
f B "spi_speed" 2 712 "void(int8 stream,int32 baud)" `535 
f N "spi_speed" 2 713 ""
v L "stream" 2 713 "int8" `539 
v L "baud" 2 713 "int32" `540 
v L "clock" 2 713 "int32" `541 
f B "spi_speed" 2 713 "void(int8 stream,int32 baud,int32 clock)" `538 
f N "spi_prewrite" 2 714 ""
v L "data" 2 714 "int8" `543 
f B "spi_prewrite" 2 714 "void(int8 data)" `542 
f N "spi_prewrite" 2 715 ""
v L "data" 2 715 "int16" `545 
f B "spi_prewrite" 2 715 "void(int16 data)" `544 
f N "spi_prewrite" 2 716 ""
v L "data" 2 716 "int32" `547 
f B "spi_prewrite" 2 716 "void(int32 data)" `546 
f N "spi_prewrite" 2 717 ""
v L "??65535" 2 717 "int8" `549 
v L "data" 2 717 "int8" `550 
f B "spi_prewrite" 2 717 "void(int8 ,int8 data)" `548 
f N "spi_prewrite" 2 718 ""
v L "??65535" 2 718 "int8" `552 
v L "data" 2 718 "int16" `553 
f B "spi_prewrite" 2 718 "void(int8 ,int16 data)" `551 
f N "spi_prewrite" 2 719 ""
v L "??65535" 2 719 "int8" `555 
v L "data" 2 719 "int32" `556 
f B "spi_prewrite" 2 719 "void(int8 ,int32 data)" `554 
f N "spi_xfer_in" 2 720 ""
f B "spi_xfer_in" 2 720 "int8()" `557 
f N "spi_xfer_in" 2 721 ""
f G "spi_xfer_in" 2 721 "int16(int8 bits)" `558 
f N "spi_xfer_in" 2 722 ""
f G "spi_xfer_in" 2 722 "int32(int8 bits)" `558 
f N "spi_xfer_in" 2 723 ""
v L "bits" 2 723 "int8" `559 
f B "spi_xfer_in" 2 723 "int8(int8 bits)" `558 
f N "spi_xfer_in" 2 724 ""
v L "bits" 2 724 "int8" `561 
f G "spi_xfer_in" 2 724 "int16(int8 bits,int8 bits)" `560 
f N "spi_xfer_in" 2 725 ""
v L "bits" 2 725 "int8" `561 
f G "spi_xfer_in" 2 725 "int32(int8 bits,int8 bits)" `560 
f N "spi_xfer_in" 2 726 ""
v L "stream" 2 726 "int8" `561 
v L "bits" 2 726 "int8" `562 
f B "spi_xfer_in" 2 726 "int8(int8 stream,int8 bits)" `560 
f N "spi_xfer_in" 2 727 ""
v L "stream" 2 727 "int8" `561 
v L "bits" 2 727 "int8" `565 
f G "spi_xfer_in" 2 727 "int16(int8 stream,int8 bits,int16 count)" `563 
f N "spi_xfer_in" 2 728 ""
v L "stream" 2 728 "int8" `561 
v L "bits" 2 728 "int8" `565 
f G "spi_xfer_in" 2 728 "int32(int8 stream,int8 bits,int16 count)" `563 
f N "spi_transfer" 2 729 ""
v L "wData" 2 729 "*int8" `564 
v L "rData" 2 729 "*int8" `565 
v L "count" 2 729 "int16" `566 
f B "spi_transfer" 2 729 "void(*int8 wData,*int8 rData,int16 count)" `563 
f N "spi_transfer" 2 730 ""
v L "stream" 2 730 "int8" `568 
v L "wData" 2 730 "*int8" `569 
v L "rData" 2 730 "*int8" `570 
v L "count" 2 730 "int16" `571 
f B "spi_transfer" 2 730 "void(int8 stream,*int8 wData,*int8 rData,int16 count)" `567 
f N "spi_transfer_write" 2 731 ""
v L "wData" 2 731 "*int8" `573 
v L "count" 2 731 "int16" `574 
f B "spi_transfer_write" 2 731 "void(*int8 wData,int16 count)" `572 
f N "spi_transfer_write" 2 732 ""
v L "stream" 2 732 "int8" `576 
v L "wData" 2 732 "*int8" `577 
v L "count" 2 732 "int16" `578 
f B "spi_transfer_write" 2 732 "void(int8 stream,*int8 wData,int16 count)" `575 
f N "spi_transfer_read" 2 733 ""
v L "rData" 2 733 "*int8" `580 
v L "count" 2 733 "int16" `581 
f B "spi_transfer_read" 2 733 "void(*int8 rData,int16 count)" `579 
f N "spi_transfer_read" 2 734 ""
v L "stream" 2 734 "int8" `583 
v L "rData" 2 734 "*int8" `584 
v L "count" 2 734 "int16" `585 
f B "spi_transfer_read" 2 734 "void(int8 stream,*int8 rData,int16 count)" `582  "#use rtos() Prototypes:"
f N "rtos_run" 2 737 ""
f B "rtos_run" 2 737 "void()" `586 
f N "rtos_yield" 2 738 ""
f B "rtos_yield" 2 738 "void()" `587 
f N "rtos_enable" 2 739 ""
v L "task" 2 739 "int8" `589 
f B "rtos_enable" 2 739 "void(int8 task)" `588 
f N "rtos_disable" 2 740 ""
v L "task" 2 740 "int8" `591 
f B "rtos_disable" 2 740 "void(int8 task)" `590 
f N "rtos_terminate" 2 741 ""
f B "rtos_terminate" 2 741 "void()" `592 
f N "rtos_await" 2 742 ""
v L "flag" 2 742 "int8" `594 
f B "rtos_await" 2 742 "void(int8 flag)" `593 
f N "rtos_wait" 2 743 ""
v L "sem" 2 743 "int8" `596 
f B "rtos_wait" 2 743 "void(int8 sem)" `595 
f N "rtos_signal" 2 744 ""
v L "sem" 2 744 "int8" `598 
f B "rtos_signal" 2 744 "void(int8 sem)" `597 
f N "rtos_msg_send" 2 745 ""
v L "task" 2 745 "int8" `600 
v L "msg" 2 745 "int8" `601 
f B "rtos_msg_send" 2 745 "void(int8 task,int8 msg)" `599 
f N "rtos_msg_read" 2 746 ""
f B "rtos_msg_read" 2 746 "int8()" `602 
f N "rtos_msg_poll" 2 747 ""
f B "rtos_msg_poll" 2 747 "int8()" `603 
f N "rtos_overrun" 2 748 ""
v L "task" 2 748 "int8" `605 
f B "rtos_overrun" 2 748 "int8(int8 task)" `604 
f N "rtos_stats" 2 749 ""
v L "task" 2 749 "int8" `607 
v L "stat" 2 749 "*int8" `608 
f B "rtos_stats" 2 749 "void(int8 task,*int8 stat)" `606  "#use timer() Prototypes:"
f N "get_ticks" 2 752 ""
f B "get_ticks" 2 752 "int8()" `609 
f N "get_ticks" 2 753 ""
f G "get_ticks" 2 753 "int16(int8 stream)" `610 
f N "get_ticks" 2 754 ""
f G "get_ticks" 2 754 "int32(int8 stream)" `610 
f N "get_ticks" 2 755 ""
v L "stream" 2 755 "int8" `611 
f B "get_ticks" 2 755 "int8(int8 stream)" `610 
f N "get_ticks" 2 756 ""
v L "stream" 2 756 "int8" `613 
f G "get_ticks" 2 756 "int16(int8 stream)" `612 
f N "get_ticks" 2 757 ""
v L "stream" 2 757 "int8" `613 
f G "get_ticks" 2 757 "int32(int8 stream)" `612 
f N "set_ticks" 2 758 ""
v L "value" 2 758 "int8" `613 
f B "set_ticks" 2 758 "void(int8 value)" `612 
f N "set_ticks" 2 759 ""
v L "value" 2 759 "int16" `615 
f B "set_ticks" 2 759 "void(int16 value)" `614 
f N "set_ticks" 2 760 ""
v L "value" 2 760 "int32" `617 
f B "set_ticks" 2 760 "void(int32 value)" `616 
f N "set_ticks" 2 761 ""
v L "stream" 2 761 "int8" `619 
v L "value" 2 761 "int8" `620 
f B "set_ticks" 2 761 "void(int8 stream,int8 value)" `618 
f N "set_ticks" 2 762 ""
v L "stream" 2 762 "int8" `622 
v L "value" 2 762 "int16" `623 
f B "set_ticks" 2 762 "void(int8 stream,int16 value)" `621 
f N "set_ticks" 2 763 ""
v L "stream" 2 763 "int8" `625 
v L "value" 2 763 "int32" `626 
f B "set_ticks" 2 763 "void(int8 stream,int32 value)" `624  "#use pwm() Prototypes:"
f N "pwm_on" 2 766 ""
f B "pwm_on" 2 766 "void()" `627 
f N "pwm_on" 2 767 ""
v L "stream" 2 767 "int8" `629 
f B "pwm_on" 2 767 "void(int8 stream)" `628 
f N "pwm_off" 2 768 ""
f B "pwm_off" 2 768 "void()" `630 
f N "pwm_off" 2 769 ""
v L "stream" 2 769 "int8" `632 
f B "pwm_off" 2 769 "void(int8 stream)" `631 
f N "pwm_set_duty" 2 770 ""
v L "duty" 2 770 "int16" `634 
f B "pwm_set_duty" 2 770 "void(int16 duty)" `633 
f N "pwm_set_duty" 2 771 ""
v L "stream" 2 771 "int8" `636 
v L "duty" 2 771 "int16" `637 
f B "pwm_set_duty" 2 771 "void(int8 stream,int16 duty)" `635 
f N "pwm_set_duty_percent" 2 772 ""
v L "percent" 2 772 "int16" `639 
f B "pwm_set_duty_percent" 2 772 "void(int16 percent)" `638 
f N "pwm_set_duty_percent" 2 773 ""
v L "stream" 2 773 "int8" `641 
v L "percent" 2 773 "int16" `642 
f B "pwm_set_duty_percent" 2 773 "void(int8 stream,int16 percent)" `640 
f N "pwm_set_frequency" 2 774 ""
v L "frequency" 2 774 "int32" `644 
f B "pwm_set_frequency" 2 774 "void(int32 frequency)" `643 
f N "pwm_set_frequency" 2 775 ""
v L "stream" 2 775 "int8" `646 
v L "frequency" 2 775 "int32" `647 
f B "pwm_set_frequency" 2 775 "void(int8 stream,int32 frequency)" `645 
f N "pwm_get_duty_period" 2 776 ""
f B "pwm_get_duty_period" 2 776 "int16()" `648 
f N "pwm_get_duty_period" 2 777 ""
v L "stream" 2 777 "int8" `650 
f B "pwm_get_duty_period" 2 777 "int16(int8 stream)" `649  "#use capture() Prototypes:"
f N "get_capture_time" 2 780 ""
f B "get_capture_time" 2 780 "int16()" `651 
f N "get_capture_time" 2 781 ""
v L "stream" 2 781 "int8" `653 
f B "get_capture_time" 2 781 "int16(int8 stream)" `652 
f N "get_capture_event" 2 782 ""
f B "get_capture_event" 2 782 "int8()" `654 
f N "get_capture_event" 2 783 ""
v L "stream" 2 783 "int8" `656 
f B "get_capture_event" 2 783 "int8(int8 stream)" `655  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
f N "goto_address" 2 796 ""
v L "address" 2 796 "int16" `658 
f B "goto_address" 2 796 "void(int16 address)" `657 
f N "label_address" 2 797 ""
v L "label" 2 797 "int16" `660 
f B "label_address" 2 797 "int16(int16 label)" `659  "Program Memory Read Prototypes:"
f N "read_program_memory" 2 800 ""
v L "address" 2 800 "int16" `662 
v L "dataptr" 2 800 "*int8" `663 
v L "count" 2 800 "int16" `664 
f B "read_program_memory" 2 800 "void(int16 address,*int8 dataptr,int16 count)" `661 
f N "read_program_eeprom" 2 801 ""
v L "address" 2 801 "int16" `666 
f B "read_program_eeprom" 2 801 "int16(int16 address)" `665  "Program Memory Write Prototypes:"
f N "erase_program_eeprom" 2 804 ""
v L "address" 2 804 "int16" `668 
f B "erase_program_eeprom" 2 804 "void(int16 address)" `667 
f N "write_program_memory" 2 805 ""
v L "address" 2 805 "int16" `670 
v L "dataptr" 2 805 "*int8" `671 
v L "count" 2 805 "int16" `672 
f B "write_program_memory" 2 805 "void(int16 address,*int8 dataptr,int16 count)" `669 
f N "write_program_eeprom" 2 806 ""
v L "address" 2 806 "int16" `674 
v L "data" 2 806 "int16" `675 
f B "write_program_eeprom" 2 806 "void(int16 address,int16 data)" `673  "EEPROM Prototypes:"
d G "__EEADDRESS__" 2 813 "unsigned int8"
f N "read_eeprom" 2 816 ""
v L "address" 2 816 "int8" `677 
f B "read_eeprom" 2 816 "int8(int8 address)" `676 
f N "write_eeprom" 2 817 ""
v L "address" 2 817 "int8" `679 
v L "value" 2 817 "int8" `680 
f B "write_eeprom" 2 817 "void(int8 address,int8 value)" `678  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
f N "enable_interrupts" 2 824 ""
v L "interrupt" 2 824 "int32" `682 
f B "enable_interrupts" 2 824 "void(int32 interrupt)" `681 
f N "disable_interrupts" 2 825 ""
v L "interrupt" 2 825 "int32" `684 
f B "disable_interrupts" 2 825 "void(int32 interrupt)" `683 
f N "clear_interrupt" 2 826 ""
v L "interrupt" 2 826 "int32" `686 
f B "clear_interrupt" 2 826 "void(int32 interrupt)" `685 
f N "interrupt_active" 2 827 ""
v L "interrupt" 2 827 "int32" `688 
f B "interrupt_active" 2 827 "int8(int32 interrupt)" `687 
f N "interrupt_enabled" 2 828 ""
v L "interrupt" 2 828 "int32" `690 
f B "interrupt_enabled" 2 828 "int8(int32 interrupt)" `689 
f N "ext_int_edge" 2 829 ""
v L "source" 2 829 "int8" `692 
v L "edge" 2 829 "int8" `693 
f B "ext_int_edge" 2 829 "void(int8 source,int8 edge)" `691 
f N "jump_to_isr" 2 830 ""
v L "address" 2 830 "int16" `695 
f B "jump_to_isr" 2 830 "void(int16 address)" `694  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 832 "0x40"
d G "H_TO_L" 2 833 "0"
d G "GLOBAL" 2 835 "0xF2C0"
d G "PERIPH" 2 836 "0xF240"
d G "INT_RTCC" 2 837 "0x00F220"
d G "INT_TIMER0" 2 838 "0x00F220"
d G "INT_TIMER1" 2 839 "0x009D01"
d G "INT_TIMER2" 2 840 "0x009D02"
d G "INT_TIMER3" 2 841 "0x00A002"
d G "INT_EXT_L2H" 2 842 "0x5000F210"
d G "INT_EXT_H2L" 2 843 "0x6000F210"
d G "INT_EXT" 2 844 "0x00F210"
d G "INT_EXT1_L2H" 2 845 "0x5001F008"
d G "INT_EXT1_H2L" 2 846 "0x6001F008"
d G "INT_EXT1" 2 847 "0x00F008"
d G "INT_EXT2_L2H" 2 848 "0x5002F010"
d G "INT_EXT2_H2L" 2 849 "0x6002F010"
d G "INT_EXT2" 2 850 "0x00F010"
d G "INT_RB" 2 851 "0x00FFF208"
d G "INT_PSP" 2 852 "0x009D80"
d G "INT_AD" 2 853 "0x009D40"
d G "INT_RDA" 2 854 "0x009D20"
d G "INT_TBE" 2 855 "0x009D10"
d G "INT_SSP" 2 856 "0x009D08"
d G "INT_CCP1" 2 857 "0x009D04"
d G "INT_CCP2" 2 858 "0x00A001"
d G "INT_BUSCOL" 2 859 "0x00A008"
d G "INT_LOWVOLT" 2 860 "0x00A004"
d G "INT_COMP" 2 861 "0x00A040"
d G "INT_EEPROM" 2 862 "0x00A010"
d G "INT_OSCF" 2 863 "0x00A080"
d G "INT_HLVD" 2 864 "0x00A004"
D G "TICKS_PER_SECOND" 1 7 "7812"
D G "TICK_TYPE" 1 8 "unsigned int32"
D G "_STRING" 3 12 ""
D G "_STDDEF" 4 13 ""
D G "ptrdiff_t" 4 18 "unsigned int16"
D G "size_t" 4 24 "unsigned int16"
D G "wchar_t" 4 26 "unsigned char"
D G "NULL" 4 27 "0"
D G "offsetof" 4 29 "(s,f) (offsetofbit(s,f)/8)"
D G "_CTYPE" 5 12 ""
D G "islower" 5 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 5 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 5 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 5 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 5 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 5 19 "(x)  ((x)==' ')"
D G "isxdigit" 5 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 5 21 "(x)  ((x)<' ')"
D G "isprint" 5 22 "(x)  ((x)>=' ')"
D G "isgraph" 5 23 "(x)  ((x)>' ')"
D G "ispunct" 5 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "jump_to_isr" 3 19 10 "FUNCTION"
F N "memmove" 3 34 ""
V L "s1" 3 34 "*void" `705 
V L "s2" 3 34 "*void" `706 
V L "n" 3 34 "int16" `707 
F G "memmove" 3 35 "*int8(*void s1,*void s2,int16 n)" `704 
V L "sc1" 3 36 "*int8" `708 
V L "sc2" 3 37 "*int8" `709 
D G "strcopy" 3 54 "strcpy"
C L "strncpy" 3 19 4 "FUNCTION"
F N "strncpy" 3 61 ""
V L "s1" 3 61 "*int8" `711 
V L "s2" 3 61 "*int8" `712 
V L "n" 3 61 "int16" `713 
F G "strncpy" 3 62 "*int8(*int8 s1,*int8 s2,int16 n)" `710 
V L "s" 3 63 "*int8" `714 
C L "strcat" 3 19 3 "FUNCTION"
F N "strcat" 3 78 ""
V L "s1" 3 78 "*int8" `716 
V L "s2" 3 78 "*int8" `717 
F G "strcat" 3 79 "*int8(*int8 s1,*int8 s2)" `715 
V L "s" 3 80 "*int8" `718 
C L "strncat" 3 19 2 "FUNCTION"
F N "strncat" 3 96 ""
V L "s1" 3 96 "*int8" `720 
V L "s2" 3 96 "*int8" `721 
V L "n" 3 96 "int16" `722 
F G "strncat" 3 97 "*int8(*int8 s1,*int8 s2,int16 n)" `719 
V L "s" 3 98 "*int8" `723 
C L "memcmp" 3 19 3 "FUNCTION"
F N "memcmp" 3 120 ""
V L "s1" 3 120 "*void" `725 
V L "s2" 3 120 "*void" `726 
V L "n" 3 120 "int16" `727 
F G "memcmp" 3 121 "sint8(*void s1,*void s2,int16 n)" `724 
V L "su1" 3 122 "*int8" `728 
V L "su2" 3 122 "*int8" `729 
C L "strcmp" 3 19 2 "FUNCTION"
F N "strcmp" 3 134 ""
V L "s1" 3 134 "*int8" `731 
V L "s2" 3 134 "*int8" `732 
F G "strcmp" 3 135 "sint8(*int8 s1,*int8 s2)" `730 
C L "strcoll" 3 19 2 "FUNCTION"
F N "strcoll" 3 144 ""
V L "s1" 3 144 "*int8" `734 
V L "s2" 3 144 "*int8" `735 
F G "strcoll" 3 145 "sint8(*int8 s1,*int8 s2)" `733 
C L "strncmp" 3 19 4 "FUNCTION"
F N "strncmp" 3 157 ""
V L "s1" 3 157 "*int8" `737 
V L "s2" 3 157 "*int8" `738 
V L "n" 3 157 "int16" `739 
F G "strncmp" 3 158 "sint8(*int8 s1,*int8 s2,int16 n)" `736 
C L "strxfrm" 3 19 4 "FUNCTION"
F N "strxfrm" 3 170 ""
V L "s1" 3 170 "*int8" `741 
V L "s2" 3 170 "*int8" `742 
V L "n" 3 170 "int16" `743 
F G "strxfrm" 3 171 "int16(*int8 s1,*int8 s2,int16 n)" `740 
V L "c" 3 172 "int8" `744 
V L "n1" 3 173 "int8" `745 
C L "strxfrm" 3 19 1 "FUNCTION"
C L "memchr" 3 19 3 "FUNCTION"
F N "memchr" 3 201 ""
V L "s" 3 201 "*void" `747 
V L "c" 3 201 "int8" `748 
V L "n" 3 201 "int16" `749 
F G "memchr" 3 202 "*int8(*void s,int8 c,int16 n)" `746 
V L "uc" 3 203 "int8" `750 
V L "su" 3 204 "*int8" `751 
C L "strchr" 3 19 2 "FUNCTION"
F N "strchr" 3 215 ""
V L "s" 3 215 "*int8" `753 
V L "c" 3 215 "int8" `754 
F G "strchr" 3 216 "*int8(*int8 s,int8 c)" `752 
C L "strcspn" 3 19 4 "FUNCTION"
F N "strcspn" 3 227 ""
V L "s1" 3 227 "*int8" `756 
V L "s2" 3 227 "*int8" `757 
F G "strcspn" 3 228 "int16(*int8 s1,*int8 s2)" `755 
V L "sc1" 3 229 "*int8" `758 
V L "sc2" 3 229 "*int8" `759 
C L "strpbrk" 3 19 4 "FUNCTION"
F N "strpbrk" 3 242 ""
V L "s1" 3 242 "*int8" `761 
V L "s2" 3 242 "*int8" `762 
F G "strpbrk" 3 243 "*int8(*int8 s1,*int8 s2)" `760 
V L "sc1" 3 244 "*int8" `763 
V L "sc2" 3 244 "*int8" `764 
C L "strrchr" 3 19 2 "FUNCTION"
F N "strrchr" 3 257 ""
V L "s" 3 257 "*int8" `766 
V L "c" 3 257 "int8" `767 
F G "strrchr" 3 258 "*int8(*int8 s,int8 c)" `765 
V L "p" 3 259 "*int8" `768 
C L "strspn" 3 19 2 "FUNCTION"
F N "strspn" 3 272 ""
V L "s1" 3 272 "*int8" `770 
V L "s2" 3 272 "*int8" `771 
F G "strspn" 3 273 "int16(*int8 s1,*int8 s2)" `769 
V L "sc1" 3 274 "*int8" `772 
V L "sc2" 3 274 "*int8" `773 
C L "strstr" 3 19 6 "FUNCTION"
F N "strstr" 3 291 ""
V L "s1" 3 291 "*int8" `775 
V L "s2" 3 291 "*int8" `776 
F G "strstr" 3 292 "*int8(*int8 s1,*int8 s2)" `774 
V L "s" 3 293 "*int8" `777 
V L "t" 3 293 "*int8" `778 
C L "strlen" 3 19 2 "FUNCTION"
F N "strlen" 3 318 ""
V L "s" 3 318 "*int8" `780 
F G "strlen" 3 319 "int16(*int8 s)" `779 
V L "sc" 3 320 "*int8" `781 
C L "strtok" 3 19 13 "FUNCTION"
F N "strtok" 3 341 ""
V L "s1" 3 341 "*int8" `783 
V L "s2" 3 341 "*int8" `784 
F G "strtok" 3 342 "*int8(*int8 s1,*int8 s2)" `782 
V L "beg" 3 343 "*int8" `785 
V L "end" 3 343 "*int8" `786 
V L "save" 3 344 "*int8" `787 
C L "stricmp" 3 19 6 "FUNCTION"
F N "stricmp" 3 392 ""
V L "s1" 3 392 "*int8" `789 
V L "s2" 3 392 "*int8" `790 
F G "stricmp" 3 393 "sint8(*int8 s1,*int8 s2)" `788 
C L "strlwr" 3 19 3 "FUNCTION"
F N "strlwr" 3 406 ""
V L "s" 3 406 "*int8" `794 
F G "strlwr" 3 407 "*int8(*int8 s)" `793 
V L "p" 3 408 "*int8" `795 
C L "strupr" 3 19 3 "FUNCTION"
F N "strupr" 3 420 ""
V L "s" 3 420 "*int8" `797 
F G "strupr" 3 421 "*int8(*int8 s)" `796 
V L "p" 3 422 "*int8" `798 
D G "LCD_DB4" 6 8 "PIN_A4"
D G "LCD_DB5" 6 9 "PIN_A5"
D G "LCD_DB6" 6 10 "PIN_E0"
D G "LCD_DB7" 6 11 "PIN_E1"
D G "LCD_RS" 6 13 "PIN_A1"
D G "LCD_RW" 6 14 "PIN_A2"
D G "LCD_E" 6 15 "PIN_A3"
D G "USE_RW_PIN" 6 39 "1"
D G "LCD_LINE_1_ADDRESS" 6 43 "0x00"
D G "LCD_LINE_2_ADDRESS" 6 44 "0x40"
D G "LCD_LINE_3_ADDRESS" 6 45 "0x14"
D G "LCD_LINE_4_ADDRESS" 6 46 "0x54"
D G "lcd_type" 6 60 "2" "0=5x7, 1=5x10, 2=2 lines(or more)"
V G "lcd_line" 6 62 "int8" `799 
V G "LCD_INIT_STRING" 6 64 "[4]" `801 
F N "lcd_send_nibble" 6 74 ""
V L "nibble" 6 74 "int8" `804 
F G "lcd_send_nibble" 6 75 "void(int8 nibble)" `803  "Note:  !! converts an integer expression"
C L "lcd_send_nibble" 6 1 1 "FUNCTION"
C L "lcd_read_nibble" 6 1 4 "FUNCTION"
F N "lcd_read_nibble" 6 96 ""
F G "lcd_read_nibble" 6 97 "int8()" `805 
V L "retval" 6 98 "int8" `806  "Create bit variables so that we can easily set"
C L "lcd_read_nibble" 6 1 1 "FUNCTION"
C L "lcd_read_byte" 6 1 1 "FUNCTION"
F N "lcd_read_byte" 6 127 ""
F G "lcd_read_byte" 6 128 "int8()" `811 
V L "low" 6 129 "int8" `812 
V L "high" 6 130 "int8" `813 
C L "lcd_send_byte" 6 1 1 "FUNCTION"
F N "lcd_send_byte" 6 145 ""
V L "address" 6 145 "int8" `815 
V L "n" 6 145 "int8" `816 
F G "lcd_send_byte" 6 146 "void(int8 address,int8 n)" `814 
F N "lcd_init" 6 174 ""
F G "lcd_init" 6 175 "void()" `817 
V L "i" 6 176 "int8" `818 
C L "lcd_init" 6 1 4 "FUNCTION"
C L "lcd_init" 6 1 6 "FUNCTION"
F N "lcd_gotoxy" 6 221 ""
V L "x" 6 221 "int8" `820 
V L "y" 6 221 "int8" `821 
F G "lcd_gotoxy" 6 222 "void(int8 x,int8 y)" `819 
V L "address" 6 223 "int8" `822 
F N "lcd_putc" 6 255 ""
V L "c" 6 255 "int8" `824 
F G "lcd_putc" 6 256 "void(int8 c)" `823 
F N "lcd_getc" 6 281 ""
V L "x" 6 281 "int8" `826 
V L "y" 6 281 "int8" `827 
F G "lcd_getc" 6 282 "int8(int8 x,int8 y)" `825 
V L "value" 6 283 "int8" `828 
C L "lcd_getc" 6 1 1 "FUNCTION"
D G "_STDLIB" 7 13 ""
D G "RAND_MAX" 7 20 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 7 26 "1"
T G "div_t" 7 34 "{sint8 quot,sint8 rem}" `832 
T G "ldiv_t" 7 39 "{sint16 quot,sint16 rem}" `836  "(C) Copyright 1996,2003 Custom Computer Services           ////"
C L "atoi" 4 3 6 "FUNCTION"
C L "atoi" 7 44 2 "FUNCTION"
C L "atoi" 7 47 1 "*"
C L "atoi" 7 47 1 "*"
F N "atoi" 7 51 ""
V L "s" 7 51 "*int8" `838 
f G "atoi" 7 51 "sint8(*int8 s)" `837  "Syntax: signed int32  atoi32(char * s)"
F N "atoi32" 7 59 ""
V L "s" 7 59 "*int8" `840 
f G "atoi32" 7 59 "sint32(*int8 s)" `839  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 7 47 2 "FUNCTION"
F N "itoa" 7 80 ""
V L "num" 7 80 "sint32" `842 
V L "base" 7 80 "int8" `843 
V L "s" 7 80 "*int8" `844 
f G "itoa" 7 80 "*int8(sint32 num,int8 base,*int8 s)" `841  "Standard template: signed int16  atol(char * s)"
C L "itoa" 7 82 1 "*"
C L "itoa" 7 82 1 "*"
F N "atol" 7 86 ""
V L "s" 7 86 "*int8" `846 
f G "atol" 7 86 "sint16(*int8 s)" `845  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 7 88 1 "*"
C L "atol" 7 88 1 "*"
C L "atol" 7 88 1 "*"
C L "atol" 7 88 1 "*"
F N "strtol" 7 94 ""
V L "s" 7 94 "*int8" `848 
V L "endptr" 7 94 "*int8" `849 
V L "base" 7 94 "sint8" `850 
f G "strtol" 7 94 "sint16(*int8 s,*int8 endptr,sint8 base)" `847  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 7 96 1 "*"
C L "strtol" 7 96 1 "*"
C L "strtol" 7 96 1 "*"
C L "strtol" 7 96 1 "*"
F N "strtoul" 7 102 ""
V L "s" 7 102 "*int8" `852 
V L "endptr" 7 102 "*int8" `853 
V L "base" 7 102 "sint8" `854 
f G "strtoul" 7 102 "int16(*int8 s,*int8 endptr,sint8 base)" `851  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 7 96 2 "FUNCTION"
C L "strtoul" 7 104 1 "*"
C L "strtoul" 7 104 1 "*"
C L "strtoul" 7 104 1 "*"
F N "strtof" 7 111 ""
V L "s" 7 111 "*int8" `856 
V L "endptr" 7 111 "??0 *" `857 
f G "strtof" 7 111 "float(*int8 s,??0 * endptr)" `855  "provided for compatibility"
D G "strtof48" 7 117 "(s,e) strtof(s, e)"
D G "strtod" 7 118 "(s,e) strtof(s, e)"
C L "strtof" 7 104 1 "FUNCTION"
C L "strtof" 7 121 1 "*"
D G "atof" 7 125 "(s)   strtof(s, (char*)0)"
C L "strtof" 7 121 1 "FUNCTION"
C L "strtof" 7 144 1 "*"
C L "strtof" 7 144 1 "*"
C L "strtof" 7 144 1 "*"
F N "atoe" 7 150 ""
V L "s" 7 150 "*int8" `860 
f G "atoe" 7 150 "float(*int8 s)" `859  "Pseudo-random sequence generation functions"
C L "atoe" 7 144 1 "FUNCTION"
C L "atoe" 7 161 1 "*"
C L "atoe" 7 161 1 "*"
C L "atoe" 7 161 1 "*"
C L "atoe" 7 161 1 "*"
C L "atoe" 7 161 1 "*"
F N "rand" 7 170 ""
f G "rand" 7 170 "int16()" `861  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 7 172 1 "*"
C L "rand" 7 172 1 "*"
C L "rand" 7 172 1 "*"
C L "rand" 7 172 1 "*"
C L "rand" 7 172 1 "*"
C L "rand" 7 172 1 "*"
C L "rand" 7 172 1 "*"
C L "rand" 7 172 1 "*"
C L "rand" 7 172 1 "*"
C L "rand" 7 172 1 "*"
C L "rand" 7 172 1 "*"
C L "rand" 7 172 1 "*"
C L "rand" 7 172 1 "*"
C L "rand" 7 172 1 "*"
C L "rand" 7 172 1 "*"
F N "srand" 7 192 ""
V L "seed" 7 192 "int32" `863 
f G "srand" 7 192 "void(int32 seed)" `862  "Memory management functions"
C L "srand" 7 172 3 "FUNCTION"
F N "system" 7 206 ""
V L "string" 7 206 "*int8" `865 
f G "system" 7 206 "sint8(*int8 string)" `864  "Searching and sorting utilities"
C L "system" 7 172 1 "FUNCTION"
C L "system" 7 212 1 "*"
C L "system" 7 212 1 "*"
C L "system" 7 212 1 "*"
C L "system" 7 212 1 "*"
C L "system" 7 212 1 "*"
C L "system" 7 212 1 "*"
C L "system" 7 212 1 "*"
C L "system" 7 212 1 "*"
C L "system" 7 212 1 "*"
C L "system" 7 212 1 "*"
C L "system" 7 212 4 "*"
C L "system" 7 230 1 "*"
C L "system" 7 230 1 "*"
C L "system" 7 230 1 "*"
C L "system" 7 230 1 "*"
C L "system" 7 230 1 "*"
C L "system" 7 230 1 "*"
C L "system" 7 230 1 "*"
C L "system" 7 230 1 "*"
D G "labs" 7 250 "abs"
F N "div" 7 252 ""
V L "numer" 7 252 "sint8" `867 
V L "denom" 7 252 "sint8" `868 
f G "div" 7 252 "div_t(sint8 numer,sint8 denom)" `866 
F N "ldiv" 7 253 ""
V L "numer" 7 253 "sint16" `870 
V L "denom" 7 253 "sint16" `871 
f G "ldiv" 7 253 "ldiv_t(sint16 numer,sint16 denom)" `869  "Multibyte character functions"
C L "ldiv" 7 230 4 "FUNCTION"
C L "ldiv" 4 2 7 "FUNCTION"
C L "ldiv" 3 2 7 "FUNCTION"
F N "div" 7 275 ""
V L "numer" 7 275 "sint8" `867 
V L "denom" 7 275 "sint8" `874 
F G "div" 7 276 "div_t(sint8 numer,sint8 denom)" `866 
V L "val" 7 277 "div_t" `872 
F N "ldiv" 7 283 ""
V L "numer" 7 283 "sint16" `870 
V L "denom" 7 283 "sint16" `881 
F G "ldiv" 7 284 "ldiv_t(sint16 numer,sint16 denom)" `869 
V L "val" 7 285 "ldiv_t" `879 
F N "atoe" 7 362 ""
V L "s" 7 362 "*int8" `887 
F G "atoe" 7 363 "float(*int8 s)" `859 
V L "pow10" 7 364 "float" `886 
V L "result" 7 365 "float" `887 
V L "sign" 7 366 "int8" `888 
V L "expsign" 7 367 "int8" `889 
V L "c" 7 368 "int8" `890 
V L "ptr" 7 369 "int8" `891 
V L "i" 7 370 "int8" `892 
V L "exp" 7 371 "float" `893 
V L "expcnt" 7 372 "int8" `894 
C L "atoe" 7 398 1 "FUNCTION"
F N "atoi" 7 430 ""
V L "s" 7 430 "*int8" `907 
F G "atoi" 7 431 "sint8(*int8 s)" `837 
V L "result" 7 432 "sint8" `906 
V L "sign" 7 433 "int8" `907 
V L "base" 7 433 "int8" `908 
V L "index" 7 433 "int8" `909 
V L "c" 7 434 "int8" `910 
C L "atoi" 7 398 1 "FUNCTION"
C L "atoi" 7 398 1 "FUNCTION"
C L "atoi" 7 398 1 "FUNCTION"
C L "atoi" 7 398 1 "FUNCTION"
C L "atoi" 7 398 1 "FUNCTION"
C L "atoi" 7 398 1 "FUNCTION"
F N "atol" 7 499 ""
V L "s" 7 499 "*int8" `912 
F G "atol" 7 500 "sint16(*int8 s)" `845 
V L "result" 7 501 "sint16" `911 
V L "sign" 7 502 "int8" `912 
V L "base" 7 502 "int8" `913 
V L "index" 7 502 "int8" `914 
V L "c" 7 503 "int8" `915 
C L "atol" 7 398 1 "FUNCTION"
C L "atol" 7 398 1 "FUNCTION"
C L "atol" 7 398 1 "FUNCTION"
C L "atol" 7 398 1 "FUNCTION"
C L "mult_with10" 7 398 1 "FUNCTION"
F N "mult_with10" 7 566 ""
V L "num" 7 566 "int32" `917 
F G "mult_with10" 7 567 "sint32(int32 num)" `916 
F N "atoi32" 7 572 ""
V L "s" 7 572 "*int8" `919 
F G "atoi32" 7 573 "sint32(*int8 s)" `839 
V L "result" 7 574 "sint32" `918 
V L "sign" 7 575 "int8" `919 
V L "base" 7 575 "int8" `920 
V L "index" 7 575 "int8" `921 
V L "c" 7 576 "int8" `922 
C L "atoi32" 7 398 1 "FUNCTION"
C L "atoi32" 7 398 1 "FUNCTION"
C L "atoi32" 7 398 1 "FUNCTION"
C L "atoi32" 7 398 1 "FUNCTION"
C L "atoi32" 7 398 1 "FUNCTION"
F N "itoa" 7 771 ""
V L "num" 7 771 "sint32" `842 
V L "base" 7 771 "int8" `843 
V L "s" 7 771 "*int8" `926 
F G "itoa" 7 772 "*int8(sint32 num,int8 base,*int8 s)" `841 
V L "temp" 7 773 "int32" `923 
V L "i" 7 774 "int8" `924 
V L "sign" 7 774 "int8" `925 
V L "cnt" 7 774 "int8" `926 
V L "c" 7 775 "int8" `927 
C L "itoa" 7 398 1 "FUNCTION"
C L "itoa" 7 398 1 "FUNCTION"
C L "itoa" 7 398 1 "FUNCTION"
C L "itoa" 7 398 1 "FUNCTION"
C L "itoa" 7 398 1 "FUNCTION"
F N "strtof" 7 886 ""
V L "s" 7 886 "*int8" `856 
V L "endptr" 7 886 "??0 *" `936 
F G "strtof" 7 887 "float(*int8 s,??0 * endptr)" `855 
V L "pow10" 7 888 "float" `934 
V L "result" 7 889 "float" `935 
V L "skip" 7 890 "int1" `936 
V L "sign" 7 890 "int1" `937 
V L "point" 7 890 "int1" `938 
V L "c" 7 891 "int8" `939 
V L "ptr" 7 892 "int8" `940 
F N "strtoul" 7 1104 ""
V L "s" 7 1104 "*int8" `852 
V L "endptr" 7 1104 "*int8" `853 
V L "base" 7 1104 "sint8" `945 
F G "strtoul" 7 1105 "int16(*int8 s,*int8 endptr,sint8 base)" `851 
V L "sc" 7 1106 "*int8" `942 
V L "s1" 7 1106 "*int8" `943 
V L "sd" 7 1106 "*int8" `944 
V L "x" 7 1107 "int16" `945 
V L "sign" 7 1108 "int8" `946 
V L "digits" 7 1109 "int8[1]" `947 
C L "strtoul" 7 398 1 "FUNCTION"
C L "strtoul" 7 398 1 "FUNCTION"
C L "strtoul" 7 398 1 "FUNCTION"
F N "strtol" 7 1166 ""
V L "s" 7 1166 "*int8" `848 
V L "endptr" 7 1166 "*int8" `849 
V L "base" 7 1166 "sint8" `952 
F G "strtol" 7 1167 "sint16(*int8 s,*int8 endptr,sint8 base)" `847 
V L "sc" 7 1168 "*int8" `949 
V L "s1" 7 1168 "*int8" `950 
V L "sd" 7 1168 "*int8" `951 
V L "x" 7 1169 "sint16" `952 
V L "sign" 7 1170 "int8" `953 
V L "digits" 7 1171 "int8[1]" `954 
C L "strtol" 7 398 1 "FUNCTION"
C L "strtol" 7 398 1 "FUNCTION"
C L "strtol" 7 398 1 "FUNCTION"
F N "system" 7 1229 ""
V L "string" 7 1229 "*int8" `957 
F G "system" 7 1230 "sint8(*int8 string)" `864 
F N "mblen" 7 1234 ""
V L "s" 7 1234 "*int8" `957 
V L "n" 7 1234 "int16" `958 
F G "mblen" 7 1235 "int16(*int8 s,int16 n)" `956 
F N "mbtowc" 7 1239 ""
V L "pwc" 7 1239 "*int8" `960 
V L "s" 7 1239 "*int8" `961 
V L "n" 7 1239 "int16" `962 
F G "mbtowc" 7 1240 "int8(*int8 pwc,*int8 s,int16 n)" `959 
F N "wctomb" 7 1245 ""
V L "s" 7 1245 "*int8" `964 
V L "wchar" 7 1245 "int8" `965 
F G "wctomb" 7 1246 "int8(*int8 s,int8 wchar)" `963 
F N "mbstowcs" 7 1251 ""
V L "pwcs" 7 1251 "*int8" `967 
V L "s" 7 1251 "*int8" `968 
V L "n" 7 1251 "int16" `969 
F G "mbstowcs" 7 1252 "int16(*int8 pwcs,*int8 s,int16 n)" `966 
F N "wcstombs" 7 1257 ""
V L "s" 7 1257 "*int8" `971 
V L "pwcs" 7 1257 "*int8" `972 
V L "n" 7 1257 "int16" `973 
F G "wcstombs" 7 1258 "int16(*int8 s,*int8 pwcs,int16 n)" `970 
V G "_Randseed" 7 1267 "int32" `974 
F N "rand" 7 1269 ""
F G "rand" 7 1270 "int16()" `861 
F N "srand" 7 1275 ""
V L "seed" 7 1275 "int32" `979 
F G "srand" 7 1276 "void(int32 seed)" `862 
F N "*_Cmpfun" 7 1285 ""
V L "p1" 7 1285 "*int8" `979 
V L "p2" 7 1285 "*int8" `980 
T G "*_Cmpfun" 7 1285 "sint8(*int8 p1,*int8 p2)" `978 
F N "qsort" 7 1292 ""
V L "qdata" 7 1292 "*int8" `983 
V L "qitems" 7 1292 "int8" `984 
V L "qsize" 7 1292 "int8" `985 
V L "cmp" 7 1292 "_Cmpfun" `986 
F G "qsort" 7 1292 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `982 
V L "m" 7 1293 "int8" `987 
V L "j" 7 1293 "int8" `988 
V L "i" 7 1293 "int8" `989 
V L "l" 7 1293 "int8" `990 
V L "done" 7 1294 "int1" `991 
V L "t" 7 1295 "int8[16]" `992 
F N "bsearch" 7 1320 ""
V L "key" 7 1320 "*int8" `995 
V L "base" 7 1320 "*int8" `996 
V L "num" 7 1320 "int16" `997 
V L "width" 7 1320 "int16" `998 
V L "cmp" 7 1320 "_Cmpfun" `999 
F G "bsearch" 7 1321 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)" `994 
V L "p" 7 1322 "*int8" `1000 
V L "q" 7 1322 "*int8" `1001 
V L "n" 7 1323 "int16" `1002 
V L "pivot" 7 1324 "int16" `1003 
V L "val" 7 1325 "sint8" `1004 
C L "bsearch" 7 398 1 "FUNCTION"
D G "A1" 0 9 "PIN_D2"
D G "A2" 0 10 "PIN_B1"
D G "B1" 0 11 "PIN_B0"
D G "B2" 0 12 "PIN_C5"
D G "button0" 0 14 "PIN_D5" "select adc or pot"
D G "button1" 0 15 "PIN_D1" "right"
D G "button2" 0 16 "PIN_D0" "left"
D G "button3" 0 17 "PIN_C3" "mid"
D G "button4" 0 18 "PIN_C2" "mode"
D G "button5" 0 19 "PIN_C1" "mode"
D G "proxy_right" 0 21 "PIN_D6"
D G "proxy_left" 0 22 "PIN_D7"
D G "one_dot" 0 24 "0"
D G "two_dot" 0 25 "1"
D G "three_dot" 0 26 "2"
D G "blank" 0 27 "3"
D G "m1" 0 28 "4"
D G "m2" 0 29 "5"
D G "m3" 0 30 "6"
V G "delay_s" 0 32 "int8" `1010 
V G "accel" 0 33 "int8" `1011 
V G "accel_value" 0 34 "int8" `1012 
V G "c" 0 35 "int8" `1013 
V G "mode_auto" 0 37 "int8" `1014 
V G "mode_manuel" 0 38 "int8" `1015 
V G "flag" 0 39 "int8" `1016 
V G "data" 0 41 "int8" `1017 
V G "str" 0 42 "int8[8]" `1018 
V G "counter" 0 43 "int8" `1019 
V G "correct" 0 44 "int8" `1020 
V G "quit1" 0 45 "int8" `1021 
V G "quit2" 0 46 "int8" `1022 
V G "proxy" 0 48 "int8" `1023 
V G "centercounter" 0 49 "int16" `1024 
V G "StartTick" 0 51 "int32" `1025 
V G "FinishTick" 0 51 "int32" `1026 
V G "CurrentTick" 0 51 "int32" `1027 
F N "serial_comm" 0 56 ""
F G "serial_comm" 0 57 "void()" `1028  "lcd_putc ("data received: ") ;"
C L "serial_comm" 0 60 2 "FUNCTION"
C L "serial_comm" 0 60 1 "FUNCTION"
C L "serial_comm" 0 60 1 "FUNCTION"
C L "serial_comm" 0 60 3 "FUNCTION"
C L "serial_comm" 0 60 2 "FUNCTION"
F N "delay_func" 0 87 ""
V L "loop" 0 87 "int8" `1037 
F G "delay_func" 0 87 "void(int8 loop)" `1036 
V L "i" 0 90 "int8" `1038 
F N "normal" 0 95 ""
V L "loop" 0 95 "int8" `1040 
F G "normal" 0 96 "void(int8 loop)" `1039  "HALF STEPPING"
C L "normal" 0 60 42 "FUNCTION"
F N "reverse" 0 207 ""
V L "loop" 0 207 "int8" `1042 
F G "reverse" 0 208 "void(int8 loop)" `1041 
F N "stop" 0 258 ""
F G "stop" 0 259 "void()" `1043 
F N "check_right_proxy" 0 267 ""
F G "check_right_proxy" 0 267 "int8()" `1044 
F N "check_left_proxy" 0 279 ""
F G "check_left_proxy" 0 279 "int8()" `1045 
F N "acc_start_normal_man" 0 290 ""
F G "acc_start_normal_man" 0 290 "void()" `1046 
F N "read_serial_speed" 0 295 ""
F G "read_serial_speed" 0 296 "float()" `1047 
F N "centerline" 0 358 ""
V L "delay" 0 358 "int8" `1049 
F G "centerline" 0 358 "void(int8 delay)" `1048 
C L "centerline" 0 60 1 "FUNCTION"
F N "gogo" 0 429 ""
F G "gogo" 0 429 "void()" `1053 
V L "start" 0 431 "int8" `1054 
V L "i" 0 441 "int8" `1055 
V L "j" 0 442 "int8" `1056 
V L "i" 0 485 "int8" `1057 
V L "j" 0 488 "int8" `1058 
V G "lcd_custom_chars" 0 536 "[1]" `1060  "Char Number 0 -- ONE"
F N "lcd_load_custom_chars" 0 608 ""
F G "lcd_load_custom_chars" 0 609 "void()" `1062 
V L "i" 0 610 "int8" `1063  "Set address counter pointing to CGRAM address 0."
C L "lcd_load_custom_chars" 0 60 2 "FUNCTION"
C L "lcd_load_custom_chars" 0 60 1 "FUNCTION"
F N "MAIN" 0 626 ""
F G "MAIN" 0 627 "void()" `1064 
C L "MAIN" 0 60 1 "FUNCTION"
C L "MAIN" 0 60 1 "FUNCTION"
V L "mode_cursor" 0 672 "int8" `1079 
V L "mod_flag" 0 673 "int8" `1080 
C L "MAIN" 0 60 1 "FUNCTION"
C L "MAIN" 0 60 1 "FUNCTION"
C L "MAIN" 0 60 1 "FUNCTION"
C L "MAIN" 0 60 1 "FUNCTION"
C L "MAIN" 0 60 1 "FUNCTION"
V L "i" 0 844 "int8" `1103 
C L "MAIN" 0 60 1 "FUNCTION"
C L "MAIN" 0 60 1 "FUNCTION"
C L "MAIN" 0 60 1 "FUNCTION"
V L "i" 0 891 "int8" `1106 
C L "MAIN" 0 60 1 "FUNCTION"
C L "MAIN" 0 60 1 "FUNCTION"
C L "MAIN" 0 60 1 "FUNCTION"
V L "start" 0 938 "int8" `1107 
V L "q" 0 939 "int8" `1108 
C L "MAIN" 0 60 1 "FUNCTION"
V L "i" 0 956 "int8" `1110 
V L "j" 0 962 "int8" `1111 
C L "MAIN" 0 60 1 "FUNCTION"
V L "start" 0 1017 "int8" `1112 
V L "q" 0 1018 "int8" `1113 
V L "i" 0 1030 "int8" `1114 
V L "j" 0 1036 "int8" `1115 
V L "i" 0 1083 "int8" `1116 
V L "j" 0 1089 "int8" `1117 
V L "i" 0 1131 "int8" `1118 
V L "j" 0 1132 "int8" `1119 
V L "i" 0 1152 "int8" `1120 
V L "j" 0 1153 "int8" `1121 
C L "MAIN" 0 60 1 "FUNCTION"
V L "i" 0 1187 "int8" `1122 
V L "j" 0 1193 "int8" `1123 
V L "i" 0 1241 "int8" `1124 
V L "j" 0 1247 "int8" `1125 
C L "MAIN" 0 60 1 "FUNCTION"
C L "MAIN" 0 60 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "get_ticks" 0 1
F B "set_ticks" 1 2
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
