F N "MAIN" 0 947 ""
D G "__PCH__" 0 1580 ""5.093""
D G "__DEVICE__" 0 1580 "4622"
D G "__DATE__" 0 1580 ""2-Sep-22""
D G "__TIME__" 0 1580 ""18:00:12""
D G "_UNICODE" 0 1580 ""?""
D G "__EVAL" 0 1580 ""?"" "Standard Header file for the PIC18F46K22 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
f N "set_tris_a" 2 45 ""
v L "value" 2 45 "int8" `55 
f B "set_tris_a" 2 45 "void(int8 value)" `54 
f N "set_tris_b" 2 46 ""
v L "value" 2 46 "int8" `57 
f B "set_tris_b" 2 46 "void(int8 value)" `56 
f N "set_tris_c" 2 47 ""
v L "value" 2 47 "int8" `59 
f B "set_tris_c" 2 47 "void(int8 value)" `58 
f N "set_tris_d" 2 48 ""
v L "value" 2 48 "int8" `61 
f B "set_tris_d" 2 48 "void(int8 value)" `60 
f N "set_tris_e" 2 49 ""
v L "value" 2 49 "int8" `63 
f B "set_tris_e" 2 49 "void(int8 value)" `62 
f N "get_tris_a" 2 50 ""
f B "get_tris_a" 2 50 "int8()" `64 
f N "get_tris_b" 2 51 ""
f B "get_tris_b" 2 51 "int8()" `65 
f N "get_tris_c" 2 52 ""
f B "get_tris_c" 2 52 "int8()" `66 
f N "get_tris_d" 2 53 ""
f B "get_tris_d" 2 53 "int8()" `67 
f N "get_tris_e" 2 54 ""
f B "get_tris_e" 2 54 "int8()" `68 
f N "output_a" 2 55 ""
v L "value" 2 55 "int8" `70 
f B "output_a" 2 55 "void(int8 value)" `69 
f N "output_b" 2 56 ""
v L "value" 2 56 "int8" `72 
f B "output_b" 2 56 "void(int8 value)" `71 
f N "output_c" 2 57 ""
v L "value" 2 57 "int8" `74 
f B "output_c" 2 57 "void(int8 value)" `73 
f N "output_d" 2 58 ""
v L "value" 2 58 "int8" `76 
f B "output_d" 2 58 "void(int8 value)" `75 
f N "output_e" 2 59 ""
v L "value" 2 59 "int8" `78 
f B "output_e" 2 59 "void(int8 value)" `77 
f N "input_a" 2 60 ""
f B "input_a" 2 60 "int8()" `79 
f N "input_b" 2 61 ""
f B "input_b" 2 61 "int8()" `80 
f N "input_c" 2 62 ""
f B "input_c" 2 62 "int8()" `81 
f N "input_d" 2 63 ""
f B "input_d" 2 63 "int8()" `82 
f N "input_e" 2 64 ""
f B "input_e" 2 64 "int8()" `83 
f N "input_change_a" 2 65 ""
f B "input_change_a" 2 65 "int8()" `84 
f N "input_change_b" 2 66 ""
f B "input_change_b" 2 66 "int8()" `85 
f N "input_change_c" 2 67 ""
f B "input_change_c" 2 67 "int8()" `86 
f N "input_change_d" 2 68 ""
f B "input_change_d" 2 68 "int8()" `87 
f N "input_change_e" 2 69 ""
f B "input_change_e" 2 69 "int8()" `88 
f N "port_b_pullups" 2 70 ""
v L "upmask" 2 70 "int8" `90 
f B "port_b_pullups" 2 70 "void(int8 upmask)" `89 
f N "port_e_pullups" 2 71 ""
v L "value" 2 71 "int8" `92 
f B "port_e_pullups" 2 71 "void(int8 value)" `91 
f N "set_slow_slew_a" 2 72 ""
v L "value" 2 72 "int8" `94 
f B "set_slow_slew_a" 2 72 "void(int8 value)" `93 
f N "set_slow_slew_b" 2 73 ""
v L "value" 2 73 "int8" `96 
f B "set_slow_slew_b" 2 73 "void(int8 value)" `95 
f N "set_slow_slew_c" 2 74 ""
v L "value" 2 74 "int8" `98 
f B "set_slow_slew_c" 2 74 "void(int8 value)" `97 
f N "set_slow_slew_d" 2 75 ""
v L "value" 2 75 "int8" `100 
f B "set_slow_slew_d" 2 75 "void(int8 value)" `99 
f N "set_slow_slew_e" 2 76 ""
v L "value" 2 76 "int8" `102 
f B "set_slow_slew_e" 2 76 "void(int8 value)" `101 
f N "input" 2 77 ""
v L "pin" 2 77 "int16" `104 
f B "input" 2 77 "int8(int16 pin)" `103 
f N "input_state" 2 78 ""
v L "pin" 2 78 "int16" `106 
f B "input_state" 2 78 "int8(int16 pin)" `105 
f N "output_low" 2 79 ""
v L "pin" 2 79 "int16" `108 
f B "output_low" 2 79 "void(int16 pin)" `107 
f N "output_high" 2 80 ""
v L "pin" 2 80 "int16" `110 
f B "output_high" 2 80 "void(int16 pin)" `109 
f N "output_toggle" 2 81 ""
v L "pin" 2 81 "int16" `112 
f B "output_toggle" 2 81 "void(int16 pin)" `111 
f N "output_bit" 2 82 ""
v L "pin" 2 82 "int16" `114 
v L "level" 2 82 "int8" `115 
f B "output_bit" 2 82 "void(int16 pin,int8 level)" `113 
f N "output_float" 2 83 ""
v L "pin" 2 83 "int16" `117 
f B "output_float" 2 83 "void(int16 pin)" `116 
f N "output_drive" 2 84 ""
v L "pin" 2 84 "int16" `119 
f B "output_drive" 2 84 "void(int16 pin)" `118  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 88 "31744"
d G "PIN_A1" 2 89 "31745"
d G "PIN_A2" 2 90 "31746"
d G "PIN_A3" 2 91 "31747"
d G "PIN_A4" 2 92 "31748"
d G "PIN_A5" 2 93 "31749"
d G "PIN_A6" 2 94 "31750"
d G "PIN_A7" 2 95 "31751"
d G "PIN_B0" 2 97 "31752"
d G "PIN_B1" 2 98 "31753"
d G "PIN_B2" 2 99 "31754"
d G "PIN_B3" 2 100 "31755"
d G "PIN_B4" 2 101 "31756"
d G "PIN_B5" 2 102 "31757"
d G "PIN_B6" 2 103 "31758"
d G "PIN_B7" 2 104 "31759"
d G "PIN_C0" 2 106 "31760"
d G "PIN_C1" 2 107 "31761"
d G "PIN_C2" 2 108 "31762"
d G "PIN_C3" 2 109 "31763"
d G "PIN_C4" 2 110 "31764"
d G "PIN_C5" 2 111 "31765"
d G "PIN_C6" 2 112 "31766"
d G "PIN_C7" 2 113 "31767"
d G "PIN_D0" 2 115 "31768"
d G "PIN_D1" 2 116 "31769"
d G "PIN_D2" 2 117 "31770"
d G "PIN_D3" 2 118 "31771"
d G "PIN_D4" 2 119 "31772"
d G "PIN_D5" 2 120 "31773"
d G "PIN_D6" 2 121 "31774"
d G "PIN_D7" 2 122 "31775"
d G "PIN_E0" 2 124 "31776"
d G "PIN_E1" 2 125 "31777"
d G "PIN_E2" 2 126 "31778"
d G "PIN_E3" 2 127 "31779"
d G "FALSE" 2 130 "0"
d G "TRUE" 2 131 "1"
d G "BYTE" 2 133 "int8"
d G "BOOLEAN" 2 134 "int1"
d G "getc" 2 136 "getch"
d G "fgetc" 2 137 "getch"
d G "getchar" 2 138 "getch"
d G "putc" 2 139 "putchar"
d G "fputc" 2 140 "putchar"
d G "fgets" 2 141 "gets"
d G "fputs" 2 142 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f N "restart_cause" 2 147 ""
f B "restart_cause" 2 147 "int8()" `120 
f N "reset_cpu" 2 148 ""
f B "reset_cpu" 2 148 "void()" `121 
f N "sleep" 2 149 ""
f B "sleep" 2 149 "void()" `122 
f N "sleep" 2 150 ""
v L "type" 2 150 "int8" `124 
f B "sleep" 2 150 "void(int8 type)" `123  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 2 152 "7"
d G "MCLR_FROM_SLEEP" 2 153 "11"
d G "MCLR_FROM_RUN" 2 154 "15"
d G "NORMAL_POWER_UP" 2 155 "12"
d G "BROWNOUT_RESTART" 2 156 "14"
d G "WDT_FROM_SLEEP" 2 157 "3"
d G "RESET_INSTRUCTION" 2 158 "0"
d G "SLEEP_FULL" 2 161 "0" "Default"
d G "SLEEP_IDLE" 2 162 "1" "Clock and peripherals don't stop"
c L "sleep" 2 3 5 "FUNCTION"
f N "setup_timer_0" 2 169 ""
v L "mode" 2 169 "int8" `126 
f B "setup_timer_0" 2 169 "void(int8 mode)" `125 
f N "set_timer0" 2 170 ""
v L "value" 2 170 "int16" `128 
f B "set_timer0" 2 170 "void(int16 value)" `127 
f N "get_timer0" 2 171 ""
f B "get_timer0" 2 171 "int16()" `129 
f N "setup_counters" 2 172 ""
v L "mode" 2 172 "int8" `131 
v L "prescaler" 2 172 "int8" `132 
f B "setup_counters" 2 172 "void(int8 mode,int8 prescaler)" `130 
f N "set_rtcc" 2 173 ""
v L "value" 2 173 "int16" `134 
f B "set_rtcc" 2 173 "void(int16 value)" `133 
f N "get_rtcc" 2 174 ""
f B "get_rtcc" 2 174 "int16()" `135  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 176 "0"
d G "T0_EXT_L_TO_H" 2 177 "32"
d G "T0_EXT_H_TO_L" 2 178 "48"
d G "T0_DIV_1" 2 180 "8"
d G "T0_DIV_2" 2 181 "0"
d G "T0_DIV_4" 2 182 "1"
d G "T0_DIV_8" 2 183 "2"
d G "T0_DIV_16" 2 184 "3"
d G "T0_DIV_32" 2 185 "4"
d G "T0_DIV_64" 2 186 "5"
d G "T0_DIV_128" 2 187 "6"
d G "T0_DIV_256" 2 188 "7"
d G "T0_OFF" 2 190 "0x80"
d G "T0_8_BIT" 2 192 "0x40"
d G "RTCC_INTERNAL" 2 196 "0"
d G "RTCC_EXT_L_TO_H" 2 197 "32"
d G "RTCC_EXT_H_TO_L" 2 198 "48"
d G "RTCC_DIV_1" 2 199 "8"
d G "RTCC_DIV_2" 2 200 "0"
d G "RTCC_DIV_4" 2 201 "1"
d G "RTCC_DIV_8" 2 202 "2"
d G "RTCC_DIV_16" 2 203 "3"
d G "RTCC_DIV_32" 2 204 "4"
d G "RTCC_DIV_64" 2 205 "5"
d G "RTCC_DIV_128" 2 206 "6"
d G "RTCC_DIV_256" 2 207 "7"
d G "RTCC_OFF" 2 208 "0x80"
d G "RTCC_8_BIT" 2 209 "0x40"
c L "get_rtcc" 2 3 8 "FUNCTION"
f N "setup_wdt" 2 220 ""
v L "mode" 2 220 "int16" `137 
f B "setup_wdt" 2 220 "void(int16 mode)" `136 
f N "restart_wdt" 2 221 ""
f B "restart_wdt" 2 221 "void()" `138  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 223 "0x100"
d G "WDT_OFF" 2 224 "0"
d G "WDT_4MS" 2 226 "0x300"
d G "WDT_8MS" 2 227 "0x500"
d G "WDT_16MS" 2 228 "0x700"
d G "WDT_32MS" 2 229 "0x900"
d G "WDT_64MS" 2 230 "0xB00"
d G "WDT_128MS" 2 231 "0xD00"
d G "WDT_256MS" 2 232 "0xF00"
d G "WDT_512MS" 2 233 "0x1100"
d G "WDT_1S" 2 234 "0x1300"
d G "WDT_2S" 2 235 "0x1500"
d G "WDT_4S" 2 236 "0x1700"
d G "WDT_8S" 2 237 "0x1900"
d G "WDT_16S" 2 238 "0x1B00"
d G "WDT_32S" 2 239 "0x1D00"
d G "WDT_64S" 2 240 "0x1F00"
d G "WDT_128S" 2 241 "0x2100"
c L "restart_wdt" 2 3 3 "FUNCTION"
f N "setup_timer_1" 2 246 ""
v L "mode" 2 246 "int16" `140 
f B "setup_timer_1" 2 246 "void(int16 mode)" `139 
f N "get_timer1" 2 247 ""
f B "get_timer1" 2 247 "int16()" `141 
f N "set_timer1" 2 248 ""
v L "value" 2 248 "int16" `143 
f B "set_timer1" 2 248 "void(int16 value)" `142  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 251 "0"
d G "T1_INTERNAL" 2 252 "0x07"
d G "T1_EXTERNAL" 2 253 "0x87"
d G "T1_EXTERNAL_SYNC" 2 254 "0x83"
d G "T1_FOSC" 2 255 "0x47"
d G "T1_ENABLE_SOSC" 2 257 "0x08"
d G "T1_DIV_BY_1" 2 259 "0"
d G "T1_DIV_BY_2" 2 260 "0x10"
d G "T1_DIV_BY_4" 2 261 "0x20"
d G "T1_DIV_BY_8" 2 262 "0x30"
d G "T1_GATE" 2 264 "0x8000"
d G "T1_GATE_INVERTED" 2 265 "0xC000"
d G "T1_GATE_TOGGLE" 2 266 "0xA000"
d G "T1_GATE_SINGLE" 2 267 "0x9000"
d G "T1_GATE_TIMER2" 2 268 "0x8100"
d G "T1_GATE_COMP1" 2 269 "0x8200"
d G "T1_GATE_COMP2" 2 270 "0x8300"
c L "set_timer1" 2 3 3 "FUNCTION"
f N "setup_timer_2" 2 275 ""
v L "mode" 2 275 "int8" `145 
v L "period" 2 275 "int8" `146 
v L "postscale" 2 275 "int8" `147 
f B "setup_timer_2" 2 275 "void(int8 mode,int8 period,int8 postscale)" `144 
f N "get_timer2" 2 276 ""
f B "get_timer2" 2 276 "int8()" `148 
f N "set_timer2" 2 277 ""
v L "value" 2 277 "int8" `150 
f B "set_timer2" 2 277 "void(int8 value)" `149  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 279 "0"
d G "T2_DIV_BY_1" 2 280 "4"
d G "T2_DIV_BY_4" 2 281 "5"
d G "T2_DIV_BY_16" 2 282 "6"
c L "set_timer2" 2 3 3 "FUNCTION"
f N "setup_timer_3" 2 287 ""
v L "mode" 2 287 "int16" `152 
f B "setup_timer_3" 2 287 "void(int16 mode)" `151 
f N "get_timer3" 2 288 ""
f B "get_timer3" 2 288 "int16()" `153 
f N "set_timer3" 2 289 ""
v L "value" 2 289 "int16" `155 
f B "set_timer3" 2 289 "void(int16 value)" `154  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 2 292 "0"
d G "T3_INTERNAL" 2 293 "0x07"
d G "T3_EXTERNAL" 2 294 "0x87"
d G "T3_EXTERNAL_SYNC" 2 295 "0x83"
d G "T3_FOSC" 2 296 "0x47"
d G "T3_ENABLE_SOSC" 2 298 "0x08"
d G "T3_DIV_BY_1" 2 300 "0"
d G "T3_DIV_BY_2" 2 301 "0x10"
d G "T3_DIV_BY_4" 2 302 "0x20"
d G "T3_DIV_BY_8" 2 303 "0x30"
d G "T3_GATE" 2 305 "0x8000"
d G "T3_GATE_INVERTED" 2 306 "0xC000"
d G "T3_GATE_TOGGLE" 2 307 "0xA000"
d G "T3_GATE_SINGLE" 2 308 "0x9000"
d G "T3_GATE_TIMER4" 2 309 "0x8100"
d G "T3_GATE_COMP1" 2 310 "0x8200"
d G "T3_GATE_COMP2" 2 311 "0x8300"
c L "set_timer3" 2 3 3 "FUNCTION"
f N "setup_timer_4" 2 316 ""
v L "mode" 2 316 "int16" `157 
v L "period" 2 316 "int8" `158 
v L "postscaler" 2 316 "int8" `159 
f B "setup_timer_4" 2 316 "void(int16 mode,int8 period,int8 postscaler)" `156 
f N "get_timer4" 2 317 ""
f B "get_timer4" 2 317 "int8()" `160 
f N "set_timer4" 2 318 ""
v L "value" 2 318 "int8" `162 
f B "set_timer4" 2 318 "void(int8 value)" `161  "Constants used for SETUP_TIMER_4() are:"
d G "T4_DISABLED" 2 320 "0"
d G "T4_DIV_BY_1" 2 321 "4"
d G "T4_DIV_BY_4" 2 322 "5"
d G "T4_DIV_BY_16" 2 323 "6"
c L "set_timer4" 2 3 3 "FUNCTION"
f N "setup_timer_5" 2 328 ""
v L "mode" 2 328 "int16" `164 
f B "setup_timer_5" 2 328 "void(int16 mode)" `163 
f N "get_timer5" 2 329 ""
f B "get_timer5" 2 329 "int16()" `165 
f N "set_timer5" 2 330 ""
v L "value" 2 330 "int16" `167 
f B "set_timer5" 2 330 "void(int16 value)" `166  "Constants used for SETUP_TIMER_5() are:"
d G "T5_DISABLED" 2 333 "0"
d G "T5_INTERNAL" 2 334 "0x07"
d G "T5_EXTERNAL" 2 335 "0x87"
d G "T5_EXTERNAL_SYNC" 2 336 "0x83"
d G "T5_FOSC" 2 337 "0x47"
d G "T5_LFINTRC" 2 338 "0xC7"
d G "T5_ENABLE_SOSC" 2 340 "0x08"
d G "T5_DIV_BY_1" 2 342 "0"
d G "T5_DIV_BY_2" 2 343 "0x10"
d G "T5_DIV_BY_4" 2 344 "0x20"
d G "T5_DIV_BY_8" 2 345 "0x30"
d G "T5_GATE" 2 347 "0x8000"
d G "T5_GATE_INVERTED" 2 348 "0xC000"
d G "T5_GATE_TOGGLE" 2 349 "0xA000"
d G "T5_GATE_SINGLE" 2 350 "0x9000"
d G "T5_GATE_TIMER6" 2 351 "0x8100"
d G "T5_GATE_COMP1" 2 352 "0x8200"
d G "T5_GATE_COMP2" 2 353 "0x8300"
c L "set_timer5" 2 3 3 "FUNCTION"
f N "setup_timer_6" 2 358 ""
v L "mode" 2 358 "int16" `169 
v L "period" 2 358 "int8" `170 
v L "postscaler" 2 358 "int8" `171 
f B "setup_timer_6" 2 358 "void(int16 mode,int8 period,int8 postscaler)" `168 
f N "get_timer6" 2 359 ""
f B "get_timer6" 2 359 "int8()" `172 
f N "set_timer6" 2 360 ""
v L "value" 2 360 "int8" `174 
f B "set_timer6" 2 360 "void(int8 value)" `173  "Constants used for SETUP_TIMER_6() are:"
d G "T6_DISABLED" 2 363 "0"
d G "T6_DIV_BY_1" 2 364 "4"
d G "T6_DIV_BY_4" 2 365 "5"
d G "T6_DIV_BY_16" 2 366 "6"
c L "set_timer6" 2 3 4 "FUNCTION"
f N "setup_ccp1" 2 372 ""
v L "mode" 2 372 "int32" `176 
f B "setup_ccp1" 2 372 "void(int32 mode)" `175 
f N "setup_ccp1" 2 373 ""
v L "mode" 2 373 "int32" `178 
v L "pwm" 2 373 "int8" `179 
f B "setup_ccp1" 2 373 "void(int32 mode,int8 pwm)" `177 
f N "set_pwm1_duty" 2 374 ""
v L "value" 2 374 "int8" `181 
f B "set_pwm1_duty" 2 374 "void(int8 value)" `180 
f N "set_pwm1_duty" 2 375 ""
v L "value" 2 375 "int16" `183 
f B "set_pwm1_duty" 2 375 "void(int16 value)" `182  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 377 "0"
d G "CCP_CAPTURE_FE" 2 378 "0x04"
d G "CCP_CAPTURE_RE" 2 379 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 380 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 381 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 2 382 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 383 "0x09"
d G "CCP_COMPARE_INT" 2 384 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 2 385 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 2 386 "0x0B"
d G "CCP_PWM" 2 387 "0x0C"
d G "CCP_PWM_PLUS_1" 2 388 "0x1c"
d G "CCP_PWM_PLUS_2" 2 389 "0x2c"
d G "CCP_PWM_PLUS_3" 2 390 "0x3c"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
d G "CCP_USE_TIMER1_AND_TIMER2" 2 400 "0x0000"
d G "CCP_USE_TIMER3_AND_TIMER4" 2 401 "0x0100"
d G "CCP_USE_TIMER5_AND_TIMER6" 2 402 "0x0200"
d G "CCP_PWM_H_H" 2 405 "0x0c"
d G "CCP_PWM_H_L" 2 406 "0x0d"
d G "CCP_PWM_L_H" 2 407 "0x0e"
d G "CCP_PWM_L_L" 2 408 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 410 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 411 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 412 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 414 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 415 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 416 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 417 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 418 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 419 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 420 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 422 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 423 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 424 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 426 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 427 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 428 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 430 "0x80000000"
d G "CCP_PULSE_STEERING_A" 2 432 "0x01000000"
d G "CCP_PULSE_STEERING_B" 2 433 "0x02000000"
d G "CCP_PULSE_STEERING_C" 2 434 "0x04000000"
d G "CCP_PULSE_STEERING_D" 2 435 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 2 436 "0x10000000"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
f N "setup_ccp2" 2 439 ""
v L "mode" 2 439 "int32" `188 
f B "setup_ccp2" 2 439 "void(int32 mode)" `187 
f N "setup_ccp2" 2 440 ""
v L "mode" 2 440 "int32" `190 
v L "pwm" 2 440 "int8" `191 
f B "setup_ccp2" 2 440 "void(int32 mode,int8 pwm)" `189 
f N "set_pwm2_duty" 2 441 ""
v L "value" 2 441 "int8" `193 
f B "set_pwm2_duty" 2 441 "void(int8 value)" `192 
f N "set_pwm2_duty" 2 442 ""
v L "value" 2 442 "int16" `195 
f B "set_pwm2_duty" 2 442 "void(int16 value)" `194 
c L "set_pwm2_duty" 2 3 1 "FUNCTION"
f N "setup_ccp3" 2 448 ""
v L "mode" 2 448 "int32" `200 
f B "setup_ccp3" 2 448 "void(int32 mode)" `199 
f N "setup_ccp3" 2 449 ""
v L "mode" 2 449 "int32" `202 
v L "pwm" 2 449 "int8" `203 
f B "setup_ccp3" 2 449 "void(int32 mode,int8 pwm)" `201 
f N "set_pwm3_duty" 2 450 ""
v L "value" 2 450 "int8" `205 
f B "set_pwm3_duty" 2 450 "void(int8 value)" `204 
f N "set_pwm3_duty" 2 451 ""
v L "value" 2 451 "int16" `207 
f B "set_pwm3_duty" 2 451 "void(int16 value)" `206 
c L "set_pwm3_duty" 2 3 1 "FUNCTION"
f N "setup_ccp4" 2 457 ""
v L "mode" 2 457 "int32" `212 
f B "setup_ccp4" 2 457 "void(int32 mode)" `211 
f N "setup_ccp4" 2 458 ""
v L "mode" 2 458 "int32" `214 
v L "pwm" 2 458 "int8" `215 
f B "setup_ccp4" 2 458 "void(int32 mode,int8 pwm)" `213 
f N "set_pwm4_duty" 2 459 ""
v L "value" 2 459 "int8" `217 
f B "set_pwm4_duty" 2 459 "void(int8 value)" `216 
f N "set_pwm4_duty" 2 460 ""
v L "value" 2 460 "int16" `219 
f B "set_pwm4_duty" 2 460 "void(int16 value)" `218 
c L "set_pwm4_duty" 2 3 1 "FUNCTION"
f N "setup_ccp5" 2 466 ""
v L "mode" 2 466 "int32" `224 
f B "setup_ccp5" 2 466 "void(int32 mode)" `223 
f N "setup_ccp5" 2 467 ""
v L "mode" 2 467 "int32" `226 
v L "pwm" 2 467 "int8" `227 
f B "setup_ccp5" 2 467 "void(int32 mode,int8 pwm)" `225 
f N "set_pwm5_duty" 2 468 ""
v L "value" 2 468 "int8" `229 
f B "set_pwm5_duty" 2 468 "void(int8 value)" `228 
f N "set_pwm5_duty" 2 469 ""
v L "value" 2 469 "int16" `231 
f B "set_pwm5_duty" 2 469 "void(int16 value)" `230 
c L "set_pwm5_duty" 2 3 3 "FUNCTION"
f N "setup_spi" 2 477 ""
v L "mode" 2 477 "int32" `236 
f B "setup_spi" 2 477 "void(int32 mode)" `235 
f N "spi_write" 2 478 ""
v L "value" 2 478 "int8" `238 
f B "spi_write" 2 478 "void(int8 value)" `237 
f N "spi_write" 2 479 ""
v L "wait" 2 479 "int8" `240 
v L "value" 2 479 "int8" `241 
f B "spi_write" 2 479 "void(int8 wait,int8 value)" `239 
f N "spi_read" 2 480 ""
f B "spi_read" 2 480 "int8()" `242 
f N "spi_read" 2 481 ""
v L "value" 2 481 "int8" `244 
f B "spi_read" 2 481 "int8(int8 value)" `243 
f N "spi_data_is_in" 2 482 ""
f B "spi_data_is_in" 2 482 "int8()" `245 
f N "setup_spi2" 2 483 ""
v L "mode" 2 483 "int32" `247 
f B "setup_spi2" 2 483 "void(int32 mode)" `246 
f N "spi_write2" 2 484 ""
v L "value" 2 484 "int8" `249 
f B "spi_write2" 2 484 "void(int8 value)" `248 
f N "spi_read2" 2 485 ""
f B "spi_read2" 2 485 "int8()" `250 
f N "spi_read2" 2 486 ""
v L "value" 2 486 "int8" `252 
f B "spi_read2" 2 486 "int8(int8 value)" `251 
f N "spi_data_is_in2" 2 487 ""
f B "spi_data_is_in2" 2 487 "int8()" `253  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 489 "0x00"
d G "SPI_MASTER" 2 490 "0x20"
d G "SPI_SLAVE" 2 491 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 492 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 493 "0x00"
d G "SPI_CLK_DIV_4" 2 494 "0x00"
d G "SPI_CLK_DIV_16" 2 495 "0x01"
d G "SPI_CLK_DIV_64" 2 496 "0x02"
d G "SPI_CLK_T2" 2 497 "0x03"
d G "SPI_SS_DISABLED" 2 498 "0x01"
d G "SPI_XMIT_L_TO_H" 2 500 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 501 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 503 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 504 "0x8000"
d G "SPI_L_TO_H" 2 507 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 508 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in2" 2 3 2 "FUNCTION"
f N "setup_uart" 2 512 ""
v L "baud" 2 512 "int32" `255 
f B "setup_uart" 2 512 "void(int32 baud)" `254 
f N "setup_uart" 2 513 ""
v L "baud" 2 513 "int32" `257 
v L "stream" 2 513 "int8" `258 
f B "setup_uart" 2 513 "void(int32 baud,int8 stream)" `256 
f N "setup_uart" 2 514 ""
v L "baud" 2 514 "int32" `260 
v L "stream" 2 514 "int8" `261 
v L "clock" 2 514 "int32" `262 
f B "setup_uart" 2 514 "void(int32 baud,int8 stream,int32 clock)" `259 
f N "set_uart_speed" 2 515 ""
v L "baud" 2 515 "int32" `264 
f B "set_uart_speed" 2 515 "void(int32 baud)" `263 
f N "set_uart_speed" 2 516 ""
v L "baud" 2 516 "int32" `266 
v L "stream" 2 516 "int8" `267 
f B "set_uart_speed" 2 516 "void(int32 baud,int8 stream)" `265 
f N "set_uart_speed" 2 517 ""
v L "baud" 2 517 "int32" `269 
v L "stream" 2 517 "int8" `270 
v L "clock" 2 517 "int32" `271 
f B "set_uart_speed" 2 517 "void(int32 baud,int8 stream,int32 clock)" `268  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 521 "2"
d G "UART_DATA" 2 522 "4"
d G "UART_AUTODETECT" 2 523 "8"
d G "UART_AUTODETECT_NOWAIT" 2 524 "9"
d G "UART_WAKEUP_ON_RDA" 2 525 "10"
d G "UART_SEND_BREAK" 2 526 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
f N "setup_comparator" 2 531 ""
v L "mode" 2 531 "int32" `273 
f B "setup_comparator" 2 531 "void(int32 mode)" `272  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 2 534 "0x404"
d G "NC_NC" 2 535 "0x404"
d G "CP1_A0_A3" 2 538 "0x000080"
d G "CP1_A1_A3" 2 539 "0x000081"
d G "CP1_B3_A3" 2 540 "0x000082"
d G "CP1_B1_A3" 2 541 "0x000083"
d G "CP1_A0_DAC" 2 542 "0x000084"
d G "CP1_A1_DAC" 2 543 "0x000085"
d G "CP1_B3_DAC" 2 544 "0x000086"
d G "CP1_B1_DAC" 2 545 "0x000087"
d G "CP1_A0_FVR" 2 546 "0x200084"
d G "CP1_A1_FVR" 2 547 "0x200085"
d G "CP1_B3_FVR" 2 548 "0x200086"
d G "CP1_B1_FVR" 2 549 "0x200087"
d G "CP1_OUT_ON_A4" 2 551 "0x000020"
d G "CP1_INVERT" 2 552 "0x000010"
d G "CP1_FAST" 2 553 "0x000008"
d G "CP1_HYST" 2 554 "0x080000"
d G "CP1_SYNC" 2 555 "0x020000"
d G "CP2_A0_A2" 2 558 "0x008000"
d G "CP2_A1_A2" 2 559 "0x008100"
d G "CP2_B3_A2" 2 560 "0x008200"
d G "CP2_B1_A2" 2 561 "0x008300"
d G "CP2_A0_DAC" 2 562 "0x008400"
d G "CP2_A1_DAC" 2 563 "0x008500"
d G "CP2_B3_DAC" 2 564 "0x008600"
d G "CP2_B1_DAC" 2 565 "0x008700"
d G "CP2_A0_FVR" 2 566 "0x108400"
d G "CP2_A1_FVR" 2 567 "0x108500"
d G "CP2_B3_FVR" 2 568 "0x108600"
d G "CP2_B1_FVR" 2 569 "0x108700"
d G "CP2_OUT_ON_A5" 2 571 "0x002000"
d G "CP2_INVERT" 2 572 "0x001000"
d G "CP2_FAST" 2 573 "0x000800"
d G "CP2_HYST" 2 574 "0x040000"
d G "CP2_SYNC" 2 575 "0x010000"
c L "setup_comparator" 2 3 2 "FUNCTION"
f N "setup_vref" 2 582 ""
v L "mode" 2 582 "int8" `277 
f B "setup_vref" 2 582 "void(int8 mode)" `276  "Constants used in setup_vref() are:"
d G "VREF_OFF" 2 584 "0"
d G "VREF_1v024" 2 585 "0x90"
d G "VREF_2v048" 2 586 "0xA0"
d G "VREF_4v096" 2 587 "0xB0"
c L "setup_vref" 2 3 2 "FUNCTION"
f N "setup_low_volt_detect" 2 591 ""
v L "mode" 2 591 "int8" `279 
f B "setup_low_volt_detect" 2 591 "void(int8 mode)" `278  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 2 593 "0x1F"
d G "LVD_47" 2 594 "0x1E"
d G "LVD_43" 2 595 "0x1D"
d G "LVD_41" 2 596 "0x1C"
d G "LVD_38" 2 597 "0x1B"
d G "LVD_36" 2 598 "0x1A"
d G "LVD_34" 2 599 "0x19"
d G "LVD_32" 2 600 "0x18"
d G "LVD_29" 2 601 "0x17"
d G "LVD_28" 2 602 "0x16"
d G "LVD_27" 2 603 "0x15"
d G "LVD_25" 2 604 "0x14"
d G "LVD_24" 2 605 "0x13"
d G "LVD_22" 2 606 "0x12"
d G "LVD_20" 2 607 "0x11"
d G "LVD_18" 2 608 "0x10"
d G "LVD_TRIGGER_BELOW" 2 610 "0"
d G "LVD_TRIGGER_ABOVE" 2 611 "0x80"
c L "setup_low_volt_detect" 2 3 3 "FUNCTION"
f N "setup_dac" 2 616 ""
v L "mode" 2 616 "int8" `281 
f B "setup_dac" 2 616 "void(int8 mode)" `280 
f N "dac_write" 2 617 ""
v L "value" 2 617 "int8" `283 
f B "dac_write" 2 617 "void(int8 value)" `282  "Constants used in SETUP_DAC() are:"
d G "DAC_OFF" 2 619 "0"
d G "DAC_VSS_VDD" 2 620 "0x80"
d G "DAC_VREF_VDD" 2 621 "0x81"
d G "DAC_VSS_VREF" 2 622 "0x84"
d G "DAC_VREF_VREF" 2 623 "0x85"
d G "DAC_VSS_FVR" 2 624 "0x88"
d G "DAC_VREF_FVR" 2 625 "0x89"
d G "DAC_OUTPUT" 2 627 "0x20"
d G "DAC_LVP_POS" 2 628 "0x40"
d G "DAC_LVP_NEG" 2 629 "0"
c L "dac_write" 2 3 2 "FUNCTION"
f N "setup_oscillator" 2 634 ""
v L "mode" 2 634 "int16" `285 
f B "setup_oscillator" 2 634 "int8(int16 mode)" `284 
f N "setup_oscillator" 2 635 ""
v L "mode" 2 635 "int16" `287 
v L "tune" 2 635 "sint8" `288 
f B "setup_oscillator" 2 635 "int8(int16 mode,sint8 tune)" `286  "Constants used in setup_oscillator() are:"
d G "OSC_PLL_ON" 2 637 "0x4000"
d G "OSC_PLL_OFF" 2 638 "0"
d G "OSC_31250" 2 639 "0x8000"
d G "OSC_31KHZ" 2 640 "0x00"
d G "OSC_250KHZ" 2 641 "0x10"
d G "OSC_500KHZ" 2 642 "0x20"
d G "OSC_1MHZ" 2 643 "0x30"
d G "OSC_2MHZ" 2 644 "0x40"
d G "OSC_4MHZ" 2 645 "0x50"
d G "OSC_8MHZ" 2 646 "0x60"
d G "OSC_16MHZ" 2 647 "0x70"
d G "OSC_32MHZ" 2 648 "0x4060"
d G "OSC_64MHZ" 2 649 "0x4070"
d G "OSC_TIMER1" 2 651 "1"
d G "OSC_INTRC" 2 652 "2"
d G "OSC_NORMAL" 2 653 "0"
d G "OSC_IDLE_MODE" 2 655 "0x80"
d G "OSC_STATE_STABLE" 2 659 "4"
d G "OSC_STATE_EXT_RUNNING" 2 660 "8"
c L "setup_oscillator" 2 3 4 "FUNCTION"
f N "setup_adc" 2 667 ""
v L "mode" 2 667 "int16" `290 
f B "setup_adc" 2 667 "void(int16 mode)" `289 
f N "read_adc" 2 668 ""
f B "read_adc" 2 668 "int8()" `291 
f N "read_adc" 2 669 ""
v L "mode" 2 669 "int8" `293 
f B "read_adc" 2 669 "int8(int8 mode)" `292 
f N "read_adc" 2 670 ""
f G "read_adc" 2 670 "int16()" `294 
f N "read_adc" 2 671 ""
v L "mode" 2 671 "int8" `295 
f G "read_adc" 2 671 "int16(int8 mode,int32 pins)" `294 
f N "adc_done" 2 672 ""
f B "adc_done" 2 672 "int8(int8 mode,int32 pins)" `294  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 674 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 675 "0x100"
d G "ADC_CLOCK_DIV_4" 2 676 "0x04"
d G "ADC_CLOCK_DIV_8" 2 677 "0x01"
d G "ADC_CLOCK_DIV_16" 2 678 "0x05"
d G "ADC_CLOCK_DIV_32" 2 679 "0x02"
d G "ADC_CLOCK_DIV_64" 2 680 "0x06"
d G "ADC_CLOCK_INTERNAL" 2 681 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 2 683 "0x00"
d G "ADC_TAD_MUL_2" 2 684 "0x08"
d G "ADC_TAD_MUL_4" 2 685 "0x10"
d G "ADC_TAD_MUL_6" 2 686 "0x18"
d G "ADC_TAD_MUL_8" 2 687 "0x20"
d G "ADC_TAD_MUL_12" 2 688 "0x28"
d G "ADC_TAD_MUL_16" 2 689 "0x30"
d G "ADC_TAD_MUL_20" 2 690 "0x38"
c L "adc_done" 2 3 1 "FUNCTION"
f N "setup_adc_ports" 2 693 ""
v L "pins" 2 693 "int32" `296 
f B "setup_adc_ports" 2 693 "void(int32 pins)" `295 
f N "setup_adc_ports" 2 694 ""
v L "pins" 2 694 "int32" `298 
v L "reference" 2 694 "int32" `299 
f B "setup_adc_ports" 2 694 "void(int32 pins,int32 reference)" `297 
f N "set_analog_pins" 2 695 ""
v L "pin" 2 695 "int8" `301 
f B "set_analog_pins" 2 695 "void(int8 pin,*int8 _VA_LIST)" `300 
f N "setup_adc_reference" 2 696 ""
v L "reference" 2 696 "int32" `304 
f B "setup_adc_reference" 2 696 "void(int32 reference)" `303 
f N "set_adc_channel" 2 697 ""
v L "channel" 2 697 "int8" `306 
f B "set_adc_channel" 2 697 "void(int8 channel)" `305  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 2 701 "0x00800000" "| A0"
d G "sAN1" 2 702 "0x01000000" "| A1"
d G "sAN2" 2 703 "0x02000000" "| A2"
d G "sAN3" 2 704 "0x04000000" "| A3"
d G "sAN4" 2 705 "0x08000000" "| A5"
d G "sAN5" 2 706 "0x00100000" "| E0"
d G "sAN6" 2 707 "0x00200000" "| E1"
d G "sAN7" 2 708 "0x00400000" "| E2"
d G "sAN8" 2 709 "0x00010000" "| B2"
d G "sAN9" 2 710 "0x00020000" "| B3"
d G "sAN10" 2 711 "0x00008000" "| B1"
d G "sAN11" 2 712 "0x00040000" "| B4"
d G "sAN12" 2 713 "0x00004000" "| B0"
d G "sAN13" 2 714 "0x00080000" "| B5"
d G "sAN14" 2 715 "0x00000100" "| C2"
d G "sAN15" 2 716 "0x00000200" "| C3"
d G "sAN16" 2 717 "0x00000400" "| C4"
d G "sAN17" 2 718 "0x00000800" "| C5"
d G "sAN18" 2 719 "0x00001000" "| C6"
d G "sAN19" 2 720 "0x00002000" "| C7"
d G "sAN20" 2 721 "0x00000001" "| D0"
d G "sAN21" 2 722 "0x00000002" "| D1"
d G "sAN22" 2 723 "0x00000004" "| D2"
d G "sAN23" 2 724 "0x00000008" "| D3"
d G "sAN24" 2 725 "0x00000010" "| D4"
d G "sAN25" 2 726 "0x00000020" "| D5"
d G "sAN26" 2 727 "0x00000040" "| D6"
d G "sAN27" 2 728 "0x00000080" "| D7"
d G "NO_ANALOGS" 2 729 "0" "None"
d G "ALL_ANALOG" 2 730 "0x0FFFFFFF" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4 B0 B5 C2 C3 C4 C5 C6 C7 D0 D1 D2 D3 D4 D5 D6 D7"
d G "VSS_VDD" 2 733 "0x00000000" "| Range 0-Vdd"
d G "VSS_VREF" 2 734 "0x40000000" "| Range 0-VrefH"
d G "VSS_FVR" 2 735 "0x80000000" "| Range 0-Fvr BUF2"
d G "VREF_VDD" 2 736 "0x10000000" "| Range VrefL-Vdd"
d G "VREF_VREF" 2 737 "0x50000000" "| Range VrefL-VrefH"
d G "VREF_FVR" 2 738 "0x90000000" "| Range VrefL-Fvr BUF2"
d G "CTMU_CHANNEL" 2 742 "0x1D"
d G "DAC_CHANNEL" 2 743 "0x1E"
d G "FVR_CHANNEL" 2 744 "0x1F"
d G "ADC_START_AND_READ" 2 747 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 748 "1"
d G "ADC_READ_ONLY" 2 749 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
f N "abs" 2 755 ""
v L "x" 2 755 "sint8" `308 
f B "abs" 2 755 "sint8(sint8 x)" `307 
f N "abs" 2 756 ""
v L "x" 2 756 "sint16" `310 
f B "abs" 2 756 "sint16(sint16 x)" `309 
f N "abs" 2 757 ""
v L "x" 2 757 "sint32" `312 
f B "abs" 2 757 "sint32(sint32 x)" `311 
f N "abs" 2 758 ""
v L "x" 2 758 "float" `314 
f B "abs" 2 758 "float(float x)" `313 
f N "_mul" 2 759 ""
v L "??65535" 2 759 "int8" `316 
v L "??65535" 2 759 "int8" `317 
f B "_mul" 2 759 "int16(int8 ,int8 )" `315 
f N "_mul" 2 760 ""
v L "??65535" 2 760 "sint8" `319 
v L "??65535" 2 760 "sint8" `320 
f B "_mul" 2 760 "sint16(sint8 ,sint8 )" `318 
f N "_mul" 2 761 ""
v L "??65535" 2 761 "int16" `322 
v L "??65535" 2 761 "int16" `323 
f B "_mul" 2 761 "int32(int16 ,int16 )" `321 
f N "_mul" 2 762 ""
v L "??65535" 2 762 "sint16" `325 
v L "??65535" 2 762 "sint16" `326 
f B "_mul" 2 762 "sint32(sint16 ,sint16 )" `324  "Memory Manipulation Prototypes:"
f N "read_bank" 2 765 ""
v L "bank" 2 765 "int8" `328 
v L "offset" 2 765 "int8" `329 
f B "read_bank" 2 765 "int8(int8 bank,int8 offset)" `327 
f N "write_bank" 2 766 ""
v L "bank" 2 766 "int8" `331 
v L "offset" 2 766 "int8" `332 
v L "value" 2 766 "int8" `333 
f B "write_bank" 2 766 "void(int8 bank,int8 offset,int8 value)" `330 
f N "strcpy" 2 767 ""
v L "dest" 2 767 "*int8" `335 
v L "src" 2 767 "*int8" `336 
f B "strcpy" 2 767 "void(*int8 dest,*int8 src)" `334 
f N "memset" 2 768 ""
v L "destination" 2 768 "*int8" `338 
v L "value" 2 768 "int8" `339 
v L "num" 2 768 "int16" `340 
f B "memset" 2 768 "void(*int8 destination,int8 value,int16 num)" `337 
f N "memcpy" 2 769 ""
v L "destination" 2 769 "*int8" `342 
v L "source" 2 769 "*int8" `343 
v L "num" 2 769 "int16" `344 
f B "memcpy" 2 769 "void(*int8 destination,*int8 source,int16 num)" `341  "String Prototypes:"
f N "toupper" 2 772 ""
v L "cvalue" 2 772 "int8" `346 
f B "toupper" 2 772 "int8(int8 cvalue)" `345 
f N "tolower" 2 773 ""
v L "cvalue" 2 773 "int8" `348 
f B "tolower" 2 773 "int8(int8 cvalue)" `347 
f N "sprintf" 2 774 ""
v L "string" 2 774 "*int8" `350 
v L "cstring" 2 774 "*int8" `351 
f B "sprintf" 2 774 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `349  "Data Manipulators Prototypes:"
f N "shift_left" 2 777 ""
v L "address" 2 777 "*int8" `354 
v L "bytes" 2 777 "int8" `355 
v L "value" 2 777 "int8" `356 
f B "shift_left" 2 777 "int8(*int8 address,int8 bytes,int8 value)" `353 
f N "shift_right" 2 778 ""
v L "address" 2 778 "*int8" `358 
v L "bytes" 2 778 "int8" `359 
v L "value" 2 778 "int8" `360 
f B "shift_right" 2 778 "int8(*int8 address,int8 bytes,int8 value)" `357 
f N "rotate_left" 2 779 ""
v L "address" 2 779 "*int8" `362 
v L "bytes" 2 779 "int8" `363 
f B "rotate_left" 2 779 "void(*int8 address,int8 bytes)" `361 
f N "rotate_right" 2 780 ""
v L "address" 2 780 "*int8" `365 
v L "bytes" 2 780 "int8" `366 
f B "rotate_right" 2 780 "void(*int8 address,int8 bytes)" `364 
f N "swap" 2 781 ""
v L "value" 2 781 "int8" `368 
f B "swap" 2 781 "void(int8 value)" `367 
f N "make8" 2 782 ""
v L "var" 2 782 "int16" `370 
v L "offset" 2 782 "int8" `371 
f B "make8" 2 782 "int8(int16 var,int8 offset)" `369 
f N "make8" 2 783 ""
v L "var" 2 783 "int32" `373 
v L "offset" 2 783 "int8" `374 
f B "make8" 2 783 "int8(int32 var,int8 offset)" `372 
f N "make16" 2 784 ""
v L "varhigh" 2 784 "int8" `376 
v L "varlow" 2 784 "int8" `377 
f B "make16" 2 784 "int16(int8 varhigh,int8 varlow)" `375 
f N "make32" 2 785 ""
v L "var1" 2 785 "int16" `379 
f B "make32" 2 785 "int32(int16 var1)" `378 
f N "make32" 2 786 ""
v L "var1" 2 786 "int16" `381 
v L "var2" 2 786 "int16" `382 
f B "make32" 2 786 "int32(int16 var1,int16 var2)" `380 
f N "make32" 2 787 ""
v L "var1" 2 787 "int16" `384 
v L "var2" 2 787 "int8" `385 
f B "make32" 2 787 "int32(int16 var1,int8 var2)" `383 
f N "make32" 2 788 ""
v L "var1" 2 788 "int16" `387 
v L "var2" 2 788 "int8" `388 
v L "var3" 2 788 "int8" `389 
f B "make32" 2 788 "int32(int16 var1,int8 var2,int8 var3)" `386 
f N "make32" 2 789 ""
v L "var1" 2 789 "int8" `391 
f B "make32" 2 789 "int32(int8 var1)" `390 
f N "make32" 2 790 ""
v L "var1" 2 790 "int8" `393 
v L "var2" 2 790 "int8" `394 
f B "make32" 2 790 "int32(int8 var1,int8 var2)" `392 
f N "make32" 2 791 ""
v L "var1" 2 791 "int8" `396 
v L "var2" 2 791 "int8" `397 
v L "var3" 2 791 "int8" `398 
f B "make32" 2 791 "int32(int8 var1,int8 var2,int8 var3)" `395 
f N "make32" 2 792 ""
v L "var1" 2 792 "int8" `400 
v L "var2" 2 792 "int8" `401 
v L "var3" 2 792 "int8" `402 
v L "var4" 2 792 "int8" `403 
f B "make32" 2 792 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `399 
f N "make32" 2 793 ""
v L "var1" 2 793 "int8" `405 
v L "var2" 2 793 "int16" `406 
f B "make32" 2 793 "int32(int8 var1,int16 var2)" `404 
f N "make32" 2 794 ""
v L "var1" 2 794 "int8" `408 
v L "var2" 2 794 "int16" `409 
v L "var3" 2 794 "int8" `410 
f B "make32" 2 794 "int32(int8 var1,int16 var2,int8 var3)" `407 
f N "make32" 2 795 ""
v L "var1" 2 795 "int8" `412 
v L "var2" 2 795 "int8" `413 
v L "var3" 2 795 "int16" `414 
f B "make32" 2 795 "int32(int8 var1,int8 var2,int16 var3)" `411 
f N "bit_set" 2 796 ""
v L "var" 2 796 "int8" `416 
v L "bit" 2 796 "int8" `417 
f B "bit_set" 2 796 "void(int8 var,int8 bit)" `415 
f N "bit_set" 2 797 ""
v L "var" 2 797 "int16" `419 
v L "bit" 2 797 "int8" `420 
f B "bit_set" 2 797 "void(int16 var,int8 bit)" `418 
f N "bit_set" 2 798 ""
v L "var" 2 798 "int32" `422 
v L "bit" 2 798 "int8" `423 
f B "bit_set" 2 798 "void(int32 var,int8 bit)" `421 
f N "bit_clear" 2 799 ""
v L "var" 2 799 "int8" `425 
v L "bit" 2 799 "int8" `426 
f B "bit_clear" 2 799 "void(int8 var,int8 bit)" `424 
f N "bit_clear" 2 800 ""
v L "var" 2 800 "int16" `428 
v L "bit" 2 800 "int8" `429 
f B "bit_clear" 2 800 "void(int16 var,int8 bit)" `427 
f N "bit_clear" 2 801 ""
v L "var" 2 801 "int32" `431 
v L "bit" 2 801 "int8" `432 
f B "bit_clear" 2 801 "void(int32 var,int8 bit)" `430 
f N "bit_test" 2 802 ""
v L "var" 2 802 "int8" `434 
v L "bit" 2 802 "int8" `435 
f B "bit_test" 2 802 "int8(int8 var,int8 bit)" `433 
f N "bit_test" 2 803 ""
v L "var" 2 803 "int16" `437 
v L "bit" 2 803 "int8" `438 
f B "bit_test" 2 803 "int8(int16 var,int8 bit)" `436 
f N "bit_test" 2 804 ""
v L "var" 2 804 "int32" `440 
v L "bit" 2 804 "int8" `441 
f B "bit_test" 2 804 "int8(int32 var,int8 bit)" `439  "#use delay() Prototypes:"
f N "delay_cycles" 2 807 ""
v L "count" 2 807 "int8" `443 
f B "delay_cycles" 2 807 "void(int8 count)" `442 
f N "delay_ms" 2 808 ""
v L "time" 2 808 "int16" `445 
f B "delay_ms" 2 808 "void(int16 time)" `444 
f N "delay_us" 2 809 ""
v L "time" 2 809 "int16" `447 
f B "delay_us" 2 809 "void(int16 time)" `446  "#use rs232() Prototypes:"
f N "putchar" 2 812 ""
v L "cdata" 2 812 "int8" `449 
f B "putchar" 2 812 "void(int8 cdata)" `448 
f N "putchar" 2 813 ""
v L "cdata" 2 813 "int8" `451 
v L "stream" 2 813 "int8" `452 
f B "putchar" 2 813 "void(int8 cdata,int8 stream)" `450 
f N "puts" 2 814 ""
v L "string" 2 814 "*int8" `454 
f B "puts" 2 814 "void(*int8 string)" `453 
f N "puts" 2 815 ""
v L "string" 2 815 "*int8" `456 
v L "stream" 2 815 "int8" `457 
f B "puts" 2 815 "void(*int8 string,int8 stream)" `455 
f N "getch" 2 816 ""
f B "getch" 2 816 "int8()" `458 
f N "getch" 2 817 ""
v L "stream" 2 817 "int8" `460 
f B "getch" 2 817 "int8(int8 stream)" `459 
f N "gets" 2 818 ""
v L "string" 2 818 "*int8" `462 
f B "gets" 2 818 "void(*int8 string)" `461 
f N "gets" 2 819 ""
v L "string" 2 819 "*int8" `464 
v L "stream" 2 819 "int8" `465 
f B "gets" 2 819 "void(*int8 string,int8 stream)" `463 
f N "kbhit" 2 820 ""
f B "kbhit" 2 820 "int8()" `466 
f N "kbhit" 2 821 ""
v L "stream" 2 821 "int8" `468 
f B "kbhit" 2 821 "int8(int8 stream)" `467 
f N "printf" 2 822 ""
v L "string" 2 822 "*int8" `470 
f B "printf" 2 822 "void(*int8 string,*int8 _VA_LIST)" `469 
f N "fprintf" 2 823 ""
v L "stream" 2 823 "int8" `473 
v L "string" 2 823 "*int8" `474 
f B "fprintf" 2 823 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `472 
f N "putc_send" 2 824 ""
f B "putc_send" 2 824 "void()" `476 
f N "fputc_send" 2 825 ""
v L "stream" 2 825 "int8" `478 
f B "fputc_send" 2 825 "void(int8 stream)" `477 
f N "rcv_buffer_full" 2 826 ""
f B "rcv_buffer_full" 2 826 "int8()" `479 
f N "rcv_buffer_full" 2 827 ""
v L "stream" 2 827 "int8" `481 
f B "rcv_buffer_full" 2 827 "int8(int8 stream)" `480 
f N "rcv_buffer_bytes" 2 828 ""
f B "rcv_buffer_bytes" 2 828 "int16()" `482 
f N "rcv_buffer_bytes" 2 829 ""
v L "stream" 2 829 "int8" `484 
f B "rcv_buffer_bytes" 2 829 "int16(int8 stream)" `483 
f N "tx_buffer_full" 2 830 ""
f B "tx_buffer_full" 2 830 "int8()" `485 
f N "tx_buffer_full" 2 831 ""
v L "stream" 2 831 "int8" `487 
f B "tx_buffer_full" 2 831 "int8(int8 stream)" `486 
f N "tx_buffer_bytes" 2 832 ""
f B "tx_buffer_bytes" 2 832 "int16()" `488 
f N "tx_buffer_bytes" 2 833 ""
v L "stream" 2 833 "int8" `490 
f B "tx_buffer_bytes" 2 833 "int16(int8 stream)" `489  "#use i2c() Prototypes:"
f N "i2c_read" 2 836 ""
f B "i2c_read" 2 836 "int8()" `491 
f N "i2c_read" 2 837 ""
v L "ack" 2 837 "int8" `493 
f B "i2c_read" 2 837 "int8(int8 ack)" `492 
f N "i2c_read" 2 838 ""
v L "stream" 2 838 "int8" `495 
v L "ack" 2 838 "int8" `496 
f B "i2c_read" 2 838 "int8(int8 stream,int8 ack)" `494 
f N "i2c_write" 2 839 ""
v L "data" 2 839 "int8" `498 
f B "i2c_write" 2 839 "int8(int8 data)" `497 
f N "i2c_write" 2 840 ""
v L "stream" 2 840 "int8" `500 
v L "data" 2 840 "int8" `501 
f B "i2c_write" 2 840 "int8(int8 stream,int8 data)" `499 
f N "i2c_start" 2 841 ""
f B "i2c_start" 2 841 "void()" `502 
f N "i2c_start" 2 842 ""
v L "stream" 2 842 "int8" `504 
f B "i2c_start" 2 842 "void(int8 stream)" `503 
f N "i2c_start" 2 843 ""
v L "stream" 2 843 "int8" `506 
v L "restart" 2 843 "int8" `507 
f B "i2c_start" 2 843 "void(int8 stream,int8 restart)" `505 
f N "i2c_stop" 2 844 ""
f B "i2c_stop" 2 844 "void()" `508 
f N "i2c_stop" 2 845 ""
v L "stream" 2 845 "int8" `510 
f B "i2c_stop" 2 845 "void(int8 stream)" `509 
f N "i2c_isr_state" 2 846 ""
f B "i2c_isr_state" 2 846 "int8()" `511 
f N "i2c_slaveaddr" 2 847 ""
v L "addr" 2 847 "int8" `513 
f B "i2c_slaveaddr" 2 847 "void(int8 addr)" `512 
f N "i2c_slaveaddr" 2 848 ""
v L "stream" 2 848 "int8" `515 
v L "addr" 2 848 "int8" `516 
f B "i2c_slaveaddr" 2 848 "void(int8 stream,int8 addr)" `514 
f N "i2c_poll" 2 849 ""
f B "i2c_poll" 2 849 "int8()" `517 
f N "i2c_poll" 2 850 ""
v L "stream" 2 850 "int8" `519 
f B "i2c_poll" 2 850 "int8(int8 stream)" `518 
f N "i2c_init" 2 851 ""
v L "baud" 2 851 "int32" `521 
f B "i2c_init" 2 851 "void(int32 baud)" `520 
f N "i2c_init" 2 852 ""
v L "stream" 2 852 "int8" `523 
v L "baud" 2 852 "int32" `524 
f B "i2c_init" 2 852 "void(int8 stream,int32 baud)" `522 
f N "i2c_transfer" 2 853 ""
v L "address" 2 853 "int8" `526 
v L "wData" 2 853 "*int8" `527 
v L "wCount" 2 853 "int8" `528 
f B "i2c_transfer" 2 853 "int8(int8 address,*int8 wData,int8 wCount)" `525 
f N "i2c_transfer" 2 854 ""
v L "address" 2 854 "int8" `530 
v L "wData" 2 854 "*int8" `531 
v L "wCount" 2 854 "int8" `532 
v L "rData" 2 854 "*int8" `533 
v L "rCount" 2 854 "*int8" `534 
f B "i2c_transfer" 2 854 "int8(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `529 
f N "i2c_transfer" 2 855 ""
v L "stream" 2 855 "int8" `536 
v L "address" 2 855 "int8" `537 
v L "wData" 2 855 "*int8" `538 
v L "wCount" 2 855 "int8" `539 
f B "i2c_transfer" 2 855 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `535 
f N "i2c_transfer" 2 856 ""
v L "stream" 2 856 "int8" `541 
v L "address" 2 856 "int8" `542 
v L "wData" 2 856 "*int8" `543 
v L "wCount" 2 856 "int8" `544 
v L "rData" 2 856 "*int8" `545 
v L "rCount" 2 856 "*int8" `546 
f B "i2c_transfer" 2 856 "int8(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `540 
f N "i2c_transfer_out" 2 857 ""
v L "address" 2 857 "int8" `548 
v L "wData" 2 857 "*int8" `549 
v L "wCount" 2 857 "int8" `550 
f B "i2c_transfer_out" 2 857 "int8(int8 address,*int8 wData,int8 wCount)" `547 
f N "i2c_transfer_out" 2 858 ""
v L "stream" 2 858 "int8" `552 
v L "address" 2 858 "int8" `553 
v L "wData" 2 858 "*int8" `554 
v L "wCount" 2 858 "int8" `555 
f B "i2c_transfer_out" 2 858 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `551 
f N "i2c_transfer_in" 2 859 ""
v L "address" 2 859 "int8" `557 
v L "rData" 2 859 "*int8" `558 
v L "rCount" 2 859 "int8" `559 
f B "i2c_transfer_in" 2 859 "int8(int8 address,*int8 rData,int8 rCount)" `556 
f N "i2c_transfer_in" 2 860 ""
v L "stream" 2 860 "int8" `561 
v L "address" 2 860 "int8" `562 
v L "rData" 2 860 "*int8" `563 
v L "rCount" 2 860 "int8" `564 
f B "i2c_transfer_in" 2 860 "int8(int8 stream,int8 address,*int8 rData,int8 rCount)" `560  "#use spi() Prototypes:"
f N "spi_xfer" 2 863 ""
f B "spi_xfer" 2 863 "int8()" `565 
f N "spi_xfer" 2 864 ""
f G "spi_xfer" 2 864 "int16(int8 data)" `566 
f N "spi_xfer" 2 865 ""
f G "spi_xfer" 2 865 "int32(int8 data)" `566 
f N "spi_xfer" 2 866 ""
v L "data" 2 866 "int8" `567 
f B "spi_xfer" 2 866 "int8(int8 data)" `566 
f N "spi_xfer" 2 867 ""
v L "data" 2 867 "int16" `569 
f B "spi_xfer" 2 867 "int16(int16 data)" `568 
f N "spi_xfer" 2 868 ""
v L "data" 2 868 "int32" `571 
f B "spi_xfer" 2 868 "int32(int32 data)" `570 
f N "spi_xfer" 2 869 ""
v L "stream" 2 869 "int8" `573 
v L "data" 2 869 "int8" `574 
f B "spi_xfer" 2 869 "int8(int8 stream,int8 data)" `572 
f N "spi_xfer" 2 870 ""
v L "stream" 2 870 "int8" `576 
v L "data" 2 870 "int16" `577 
f B "spi_xfer" 2 870 "int16(int8 stream,int16 data)" `575 
f N "spi_xfer" 2 871 ""
v L "stream" 2 871 "int8" `579 
v L "data" 2 871 "int32" `580 
f B "spi_xfer" 2 871 "int32(int8 stream,int32 data)" `578 
f N "spi_xfer" 2 872 ""
v L "stream" 2 872 "int8" `582 
v L "data" 2 872 "int8" `583 
v L "bits" 2 872 "int8" `584 
f B "spi_xfer" 2 872 "int8(int8 stream,int8 data,int8 bits)" `581 
f N "spi_xfer" 2 873 ""
v L "stream" 2 873 "int8" `586 
v L "data" 2 873 "int16" `587 
v L "bits" 2 873 "int8" `588 
f B "spi_xfer" 2 873 "int16(int8 stream,int16 data,int8 bits)" `585 
f N "spi_xfer" 2 874 ""
v L "stream" 2 874 "int8" `590 
v L "data" 2 874 "int32" `591 
v L "bits" 2 874 "int8" `592 
f B "spi_xfer" 2 874 "int32(int8 stream,int32 data,int8 bits)" `589 
f N "spi_init" 2 875 ""
v L "baud" 2 875 "int32" `594 
f B "spi_init" 2 875 "void(int32 baud)" `593 
f N "spi_init" 2 876 ""
v L "stream" 2 876 "int8" `596 
v L "baud" 2 876 "int32" `597 
f B "spi_init" 2 876 "void(int8 stream,int32 baud)" `595 
f N "spi_speed" 2 877 ""
v L "baud" 2 877 "int32" `599 
f B "spi_speed" 2 877 "void(int32 baud)" `598 
f N "spi_speed" 2 878 ""
v L "stream" 2 878 "int8" `601 
v L "baud" 2 878 "int32" `602 
f B "spi_speed" 2 878 "void(int8 stream,int32 baud)" `600 
f N "spi_speed" 2 879 ""
v L "stream" 2 879 "int8" `604 
v L "baud" 2 879 "int32" `605 
v L "clock" 2 879 "int32" `606 
f B "spi_speed" 2 879 "void(int8 stream,int32 baud,int32 clock)" `603 
f N "spi_prewrite" 2 880 ""
v L "data" 2 880 "int8" `608 
f B "spi_prewrite" 2 880 "void(int8 data)" `607 
f N "spi_prewrite" 2 881 ""
v L "data" 2 881 "int16" `610 
f B "spi_prewrite" 2 881 "void(int16 data)" `609 
f N "spi_prewrite" 2 882 ""
v L "data" 2 882 "int32" `612 
f B "spi_prewrite" 2 882 "void(int32 data)" `611 
f N "spi_prewrite" 2 883 ""
v L "??65535" 2 883 "int8" `614 
v L "data" 2 883 "int8" `615 
f B "spi_prewrite" 2 883 "void(int8 ,int8 data)" `613 
f N "spi_prewrite" 2 884 ""
v L "??65535" 2 884 "int8" `617 
v L "data" 2 884 "int16" `618 
f B "spi_prewrite" 2 884 "void(int8 ,int16 data)" `616 
f N "spi_prewrite" 2 885 ""
v L "??65535" 2 885 "int8" `620 
v L "data" 2 885 "int32" `621 
f B "spi_prewrite" 2 885 "void(int8 ,int32 data)" `619 
f N "spi_xfer_in" 2 886 ""
f B "spi_xfer_in" 2 886 "int8()" `622 
f N "spi_xfer_in" 2 887 ""
f G "spi_xfer_in" 2 887 "int16(int8 bits)" `623 
f N "spi_xfer_in" 2 888 ""
f G "spi_xfer_in" 2 888 "int32(int8 bits)" `623 
f N "spi_xfer_in" 2 889 ""
v L "bits" 2 889 "int8" `624 
f B "spi_xfer_in" 2 889 "int8(int8 bits)" `623 
f N "spi_xfer_in" 2 890 ""
v L "bits" 2 890 "int8" `626 
f G "spi_xfer_in" 2 890 "int16(int8 bits,int8 bits)" `625 
f N "spi_xfer_in" 2 891 ""
v L "bits" 2 891 "int8" `626 
f G "spi_xfer_in" 2 891 "int32(int8 bits,int8 bits)" `625 
f N "spi_xfer_in" 2 892 ""
v L "stream" 2 892 "int8" `626 
v L "bits" 2 892 "int8" `627 
f B "spi_xfer_in" 2 892 "int8(int8 stream,int8 bits)" `625 
f N "spi_xfer_in" 2 893 ""
v L "stream" 2 893 "int8" `626 
v L "bits" 2 893 "int8" `630 
f G "spi_xfer_in" 2 893 "int16(int8 stream,int8 bits,int16 count)" `628 
f N "spi_xfer_in" 2 894 ""
v L "stream" 2 894 "int8" `626 
v L "bits" 2 894 "int8" `630 
f G "spi_xfer_in" 2 894 "int32(int8 stream,int8 bits,int16 count)" `628 
f N "spi_transfer" 2 895 ""
v L "wData" 2 895 "*int8" `629 
v L "rData" 2 895 "*int8" `630 
v L "count" 2 895 "int16" `631 
f B "spi_transfer" 2 895 "void(*int8 wData,*int8 rData,int16 count)" `628 
f N "spi_transfer" 2 896 ""
v L "stream" 2 896 "int8" `633 
v L "wData" 2 896 "*int8" `634 
v L "rData" 2 896 "*int8" `635 
v L "count" 2 896 "int16" `636 
f B "spi_transfer" 2 896 "void(int8 stream,*int8 wData,*int8 rData,int16 count)" `632 
f N "spi_transfer_write" 2 897 ""
v L "wData" 2 897 "*int8" `638 
v L "count" 2 897 "int16" `639 
f B "spi_transfer_write" 2 897 "void(*int8 wData,int16 count)" `637 
f N "spi_transfer_write" 2 898 ""
v L "stream" 2 898 "int8" `641 
v L "wData" 2 898 "*int8" `642 
v L "count" 2 898 "int16" `643 
f B "spi_transfer_write" 2 898 "void(int8 stream,*int8 wData,int16 count)" `640 
f N "spi_transfer_read" 2 899 ""
v L "rData" 2 899 "*int8" `645 
v L "count" 2 899 "int16" `646 
f B "spi_transfer_read" 2 899 "void(*int8 rData,int16 count)" `644 
f N "spi_transfer_read" 2 900 ""
v L "stream" 2 900 "int8" `648 
v L "rData" 2 900 "*int8" `649 
v L "count" 2 900 "int16" `650 
f B "spi_transfer_read" 2 900 "void(int8 stream,*int8 rData,int16 count)" `647  "#use rtos() Prototypes:"
f N "rtos_run" 2 903 ""
f B "rtos_run" 2 903 "void()" `651 
f N "rtos_yield" 2 904 ""
f B "rtos_yield" 2 904 "void()" `652 
f N "rtos_enable" 2 905 ""
v L "task" 2 905 "int8" `654 
f B "rtos_enable" 2 905 "void(int8 task)" `653 
f N "rtos_disable" 2 906 ""
v L "task" 2 906 "int8" `656 
f B "rtos_disable" 2 906 "void(int8 task)" `655 
f N "rtos_terminate" 2 907 ""
f B "rtos_terminate" 2 907 "void()" `657 
f N "rtos_await" 2 908 ""
v L "flag" 2 908 "int8" `659 
f B "rtos_await" 2 908 "void(int8 flag)" `658 
f N "rtos_wait" 2 909 ""
v L "sem" 2 909 "int8" `661 
f B "rtos_wait" 2 909 "void(int8 sem)" `660 
f N "rtos_signal" 2 910 ""
v L "sem" 2 910 "int8" `663 
f B "rtos_signal" 2 910 "void(int8 sem)" `662 
f N "rtos_msg_send" 2 911 ""
v L "task" 2 911 "int8" `665 
v L "msg" 2 911 "int8" `666 
f B "rtos_msg_send" 2 911 "void(int8 task,int8 msg)" `664 
f N "rtos_msg_read" 2 912 ""
f B "rtos_msg_read" 2 912 "int8()" `667 
f N "rtos_msg_poll" 2 913 ""
f B "rtos_msg_poll" 2 913 "int8()" `668 
f N "rtos_overrun" 2 914 ""
v L "task" 2 914 "int8" `670 
f B "rtos_overrun" 2 914 "int8(int8 task)" `669 
f N "rtos_stats" 2 915 ""
v L "task" 2 915 "int8" `672 
v L "stat" 2 915 "*int8" `673 
f B "rtos_stats" 2 915 "void(int8 task,*int8 stat)" `671  "#use timer() Prototypes:"
f N "get_ticks" 2 918 ""
f B "get_ticks" 2 918 "int8()" `674 
f N "get_ticks" 2 919 ""
f G "get_ticks" 2 919 "int16(int8 stream)" `675 
f N "get_ticks" 2 920 ""
f G "get_ticks" 2 920 "int32(int8 stream)" `675 
f N "get_ticks" 2 921 ""
v L "stream" 2 921 "int8" `676 
f B "get_ticks" 2 921 "int8(int8 stream)" `675 
f N "get_ticks" 2 922 ""
v L "stream" 2 922 "int8" `678 
f G "get_ticks" 2 922 "int16(int8 stream)" `677 
f N "get_ticks" 2 923 ""
v L "stream" 2 923 "int8" `678 
f G "get_ticks" 2 923 "int32(int8 stream)" `677 
f N "set_ticks" 2 924 ""
v L "value" 2 924 "int8" `678 
f B "set_ticks" 2 924 "void(int8 value)" `677 
f N "set_ticks" 2 925 ""
v L "value" 2 925 "int16" `680 
f B "set_ticks" 2 925 "void(int16 value)" `679 
f N "set_ticks" 2 926 ""
v L "value" 2 926 "int32" `682 
f B "set_ticks" 2 926 "void(int32 value)" `681 
f N "set_ticks" 2 927 ""
v L "stream" 2 927 "int8" `684 
v L "value" 2 927 "int8" `685 
f B "set_ticks" 2 927 "void(int8 stream,int8 value)" `683 
f N "set_ticks" 2 928 ""
v L "stream" 2 928 "int8" `687 
v L "value" 2 928 "int16" `688 
f B "set_ticks" 2 928 "void(int8 stream,int16 value)" `686 
f N "set_ticks" 2 929 ""
v L "stream" 2 929 "int8" `690 
v L "value" 2 929 "int32" `691 
f B "set_ticks" 2 929 "void(int8 stream,int32 value)" `689  "#use pwm() Prototypes:"
f N "pwm_on" 2 932 ""
f B "pwm_on" 2 932 "void()" `692 
f N "pwm_on" 2 933 ""
v L "stream" 2 933 "int8" `694 
f B "pwm_on" 2 933 "void(int8 stream)" `693 
f N "pwm_off" 2 934 ""
f B "pwm_off" 2 934 "void()" `695 
f N "pwm_off" 2 935 ""
v L "stream" 2 935 "int8" `697 
f B "pwm_off" 2 935 "void(int8 stream)" `696 
f N "pwm_set_duty" 2 936 ""
v L "duty" 2 936 "int16" `699 
f B "pwm_set_duty" 2 936 "void(int16 duty)" `698 
f N "pwm_set_duty" 2 937 ""
v L "stream" 2 937 "int8" `701 
v L "duty" 2 937 "int16" `702 
f B "pwm_set_duty" 2 937 "void(int8 stream,int16 duty)" `700 
f N "pwm_set_duty_percent" 2 938 ""
v L "percent" 2 938 "int16" `704 
f B "pwm_set_duty_percent" 2 938 "void(int16 percent)" `703 
f N "pwm_set_duty_percent" 2 939 ""
v L "stream" 2 939 "int8" `706 
v L "percent" 2 939 "int16" `707 
f B "pwm_set_duty_percent" 2 939 "void(int8 stream,int16 percent)" `705 
f N "pwm_set_frequency" 2 940 ""
v L "frequency" 2 940 "int32" `709 
f B "pwm_set_frequency" 2 940 "void(int32 frequency)" `708 
f N "pwm_set_frequency" 2 941 ""
v L "stream" 2 941 "int8" `711 
v L "frequency" 2 941 "int32" `712 
f B "pwm_set_frequency" 2 941 "void(int8 stream,int32 frequency)" `710 
f N "pwm_get_duty_period" 2 942 ""
f B "pwm_get_duty_period" 2 942 "int16()" `713 
f N "pwm_get_duty_period" 2 943 ""
v L "stream" 2 943 "int8" `715 
f B "pwm_get_duty_period" 2 943 "int16(int8 stream)" `714  "#use capture() Prototypes:"
f N "get_capture_time" 2 946 ""
f B "get_capture_time" 2 946 "int16()" `716 
f N "get_capture_time" 2 947 ""
v L "stream" 2 947 "int8" `718 
f B "get_capture_time" 2 947 "int16(int8 stream)" `717 
f N "get_capture_event" 2 948 ""
f B "get_capture_event" 2 948 "int8()" `719 
f N "get_capture_event" 2 949 ""
v L "stream" 2 949 "int8" `721 
f B "get_capture_event" 2 949 "int8(int8 stream)" `720  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
f N "goto_address" 2 962 ""
v L "address" 2 962 "int32" `723 
f B "goto_address" 2 962 "void(int32 address)" `722 
f N "label_address" 2 963 ""
v L "label" 2 963 "int32" `725 
f B "label_address" 2 963 "int32(int32 label)" `724  "Program Memory Read Prototypes:"
f N "read_program_memory" 2 966 ""
v L "address" 2 966 "int32" `727 
v L "dataptr" 2 966 "*int8" `728 
v L "count" 2 966 "int16" `729 
f B "read_program_memory" 2 966 "void(int32 address,*int8 dataptr,int16 count)" `726 
f N "read_program_eeprom" 2 967 ""
v L "address" 2 967 "int32" `731 
f B "read_program_eeprom" 2 967 "int16(int32 address)" `730  "Program Memory Write Prototypes:"
f N "write_program_memory" 2 970 ""
v L "address" 2 970 "int32" `733 
v L "dataptr" 2 970 "*int8" `734 
v L "count" 2 970 "int16" `735 
f B "write_program_memory" 2 970 "void(int32 address,*int8 dataptr,int16 count)" `732 
f N "write_program_eeprom" 2 971 ""
v L "address" 2 971 "int32" `737 
v L "data" 2 971 "int16" `738 
f B "write_program_eeprom" 2 971 "void(int32 address,int16 data)" `736  "EEPROM Prototypes:"
d G "__EEADDRESS__" 2 976 "unsigned int16"
f N "read_eeprom" 2 981 ""
v L "address" 2 981 "int16" `740 
f B "read_eeprom" 2 981 "int8(int16 address)" `739 
f N "write_eeprom" 2 982 ""
v L "address" 2 982 "int16" `742 
v L "value" 2 982 "int8" `743 
f B "write_eeprom" 2 982 "void(int16 address,int8 value)" `741  "#use touchpad() Prototypes:"
f N "touchpad_state" 2 985 ""
v L "state" 2 985 "int8" `745 
f B "touchpad_state" 2 985 "void(int8 state)" `744 
f N "touchpad_getc" 2 986 ""
f B "touchpad_getc" 2 986 "int8()" `746 
f N "touchpad_hit" 2 987 ""
f B "touchpad_hit" 2 987 "int8()" `747  "INT"
c L "touchpad_hit" 2 3 4 "FUNCTION"
f N "enable_interrupts" 2 993 ""
v L "interrupt" 2 993 "int32" `749 
f B "enable_interrupts" 2 993 "void(int32 interrupt)" `748 
f N "disable_interrupts" 2 994 ""
v L "interrupt" 2 994 "int32" `751 
f B "disable_interrupts" 2 994 "void(int32 interrupt)" `750 
f N "clear_interrupt" 2 995 ""
v L "interrupt" 2 995 "int32" `753 
f B "clear_interrupt" 2 995 "void(int32 interrupt)" `752 
f N "interrupt_active" 2 996 ""
v L "interrupt" 2 996 "int32" `755 
f B "interrupt_active" 2 996 "int8(int32 interrupt)" `754 
f N "interrupt_enabled" 2 997 ""
v L "interrupt" 2 997 "int32" `757 
f B "interrupt_enabled" 2 997 "int8(int32 interrupt)" `756 
f N "ext_int_edge" 2 998 ""
v L "source" 2 998 "int8" `759 
v L "edge" 2 998 "int8" `760 
f B "ext_int_edge" 2 998 "void(int8 source,int8 edge)" `758 
f N "jump_to_isr" 2 999 ""
v L "address" 2 999 "int16" `762 
f B "jump_to_isr" 2 999 "void(int16 address)" `761  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 1001 "0x40"
d G "H_TO_L" 2 1002 "0"
d G "GLOBAL" 2 1004 "0xF2C0"
d G "PERIPH" 2 1005 "0xF240"
d G "INT_RTCC" 2 1006 "0x00F220"
d G "INT_TIMER0" 2 1007 "0x00F220"
d G "INT_TIMER1" 2 1008 "0x009D01"
d G "INT_TIMER2" 2 1009 "0x009D02"
d G "INT_TIMER3" 2 1010 "0x00A002"
d G "INT_EXT_L2H" 2 1011 "0x5000F210"
d G "INT_EXT_H2L" 2 1012 "0x6000F210"
d G "INT_EXT" 2 1013 "0x00F210"
d G "INT_EXT1_L2H" 2 1014 "0x5001F008"
d G "INT_EXT1_H2L" 2 1015 "0x6001F008"
d G "INT_EXT1" 2 1016 "0x00F008"
d G "INT_EXT2_L2H" 2 1017 "0x5002F010"
d G "INT_EXT2_H2L" 2 1018 "0x6002F010"
d G "INT_EXT2" 2 1019 "0x00F010"
d G "INT_RB" 2 1020 "0x01FFF208"
d G "INT_AD" 2 1021 "0x009D40"
d G "INT_RDA" 2 1022 "0x009D20"
d G "INT_TBE" 2 1023 "0x009D10"
d G "INT_SSP" 2 1024 "0x009D08"
d G "INT_CCP1" 2 1025 "0x009D04"
d G "INT_CCP2" 2 1026 "0x00A001"
d G "INT_BUSCOL" 2 1027 "0x00A008"
d G "INT_COMP" 2 1028 "0x00A040"
d G "INT_EEPROM" 2 1029 "0x00A010"
d G "INT_TBE2" 2 1030 "0x00A310"
d G "INT_RDA2" 2 1031 "0x00A320"
d G "INT_OSCF" 2 1032 "0x00A080"
d G "INT_HLVD" 2 1033 "0x00A004"
d G "INT_BUSCOL2" 2 1034 "0x00A340"
d G "INT_COMP2" 2 1035 "0x00A020"
d G "INT_SSP2" 2 1036 "0x00A380"
d G "INT_TIMER4" 2 1037 "0x007D01"
d G "INT_TIMER5" 2 1038 "0x007D02"
d G "INT_TIMER6" 2 1039 "0x007D04"
d G "INT_CCP3" 2 1040 "0x007A01"
d G "INT_CCP4" 2 1041 "0x007A02"
d G "INT_CCP5" 2 1042 "0x007A04"
d G "INT_TMR1G" 2 1043 "0x00A301"
d G "INT_TMR3G" 2 1044 "0x00A302"
d G "INT_TMR5G" 2 1045 "0x00A304"
d G "INT_CTMU" 2 1046 "0x00A308"
d G "INT_RB4" 2 1047 "0x110F208"
d G "INT_RB5" 2 1048 "0x120F208"
d G "INT_RB6" 2 1049 "0x140F208"
d G "INT_RB7" 2 1050 "0x180F208"
D G "TICKS_PER_SECOND" 1 7 "7812"
D G "TICK_TYPE" 1 8 "unsigned int32"
D G "_STRING" 3 12 ""
D G "_STDDEF" 4 13 ""
D G "ptrdiff_t" 4 18 "unsigned int16"
D G "size_t" 4 24 "unsigned int16"
D G "wchar_t" 4 26 "unsigned char"
D G "NULL" 4 27 "0"
D G "offsetof" 4 29 "(s,f) (offsetofbit(s,f)/8)"
D G "_CTYPE" 5 12 ""
D G "islower" 5 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 5 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 5 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 5 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 5 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 5 19 "(x)  ((x)==' ')"
D G "isxdigit" 5 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 5 21 "(x)  ((x)<' ')"
D G "isprint" 5 22 "(x)  ((x)>=' ')"
D G "isgraph" 5 23 "(x)  ((x)>' ')"
D G "ispunct" 5 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "jump_to_isr" 3 19 10 "FUNCTION"
F N "memmove" 3 34 ""
V L "s1" 3 34 "*void" `772 
V L "s2" 3 34 "*void" `773 
V L "n" 3 34 "int16" `774 
F G "memmove" 3 35 "*int8(*void s1,*void s2,int16 n)" `771 
V L "sc1" 3 36 "*int8" `775 
V L "sc2" 3 37 "*int8" `776 
D G "strcopy" 3 54 "strcpy"
C L "strncpy" 3 19 4 "FUNCTION"
F N "strncpy" 3 61 ""
V L "s1" 3 61 "*int8" `778 
V L "s2" 3 61 "*int8" `779 
V L "n" 3 61 "int16" `780 
F G "strncpy" 3 62 "*int8(*int8 s1,*int8 s2,int16 n)" `777 
V L "s" 3 63 "*int8" `781 
C L "strcat" 3 19 3 "FUNCTION"
F N "strcat" 3 78 ""
V L "s1" 3 78 "*int8" `783 
V L "s2" 3 78 "*int8" `784 
F G "strcat" 3 79 "*int8(*int8 s1,*int8 s2)" `782 
V L "s" 3 80 "*int8" `785 
C L "strncat" 3 19 2 "FUNCTION"
F N "strncat" 3 96 ""
V L "s1" 3 96 "*int8" `787 
V L "s2" 3 96 "*int8" `788 
V L "n" 3 96 "int16" `789 
F G "strncat" 3 97 "*int8(*int8 s1,*int8 s2,int16 n)" `786 
V L "s" 3 98 "*int8" `790 
C L "memcmp" 3 19 3 "FUNCTION"
F N "memcmp" 3 120 ""
V L "s1" 3 120 "*void" `792 
V L "s2" 3 120 "*void" `793 
V L "n" 3 120 "int16" `794 
F G "memcmp" 3 121 "sint8(*void s1,*void s2,int16 n)" `791 
V L "su1" 3 122 "*int8" `795 
V L "su2" 3 122 "*int8" `796 
C L "strcmp" 3 19 2 "FUNCTION"
F N "strcmp" 3 134 ""
V L "s1" 3 134 "*int8" `798 
V L "s2" 3 134 "*int8" `799 
F G "strcmp" 3 135 "sint8(*int8 s1,*int8 s2)" `797 
C L "strcoll" 3 19 2 "FUNCTION"
F N "strcoll" 3 144 ""
V L "s1" 3 144 "*int8" `801 
V L "s2" 3 144 "*int8" `802 
F G "strcoll" 3 145 "sint8(*int8 s1,*int8 s2)" `800 
C L "strncmp" 3 19 4 "FUNCTION"
F N "strncmp" 3 157 ""
V L "s1" 3 157 "*int8" `804 
V L "s2" 3 157 "*int8" `805 
V L "n" 3 157 "int16" `806 
F G "strncmp" 3 158 "sint8(*int8 s1,*int8 s2,int16 n)" `803 
C L "strxfrm" 3 19 4 "FUNCTION"
F N "strxfrm" 3 170 ""
V L "s1" 3 170 "*int8" `808 
V L "s2" 3 170 "*int8" `809 
V L "n" 3 170 "int16" `810 
F G "strxfrm" 3 171 "int16(*int8 s1,*int8 s2,int16 n)" `807 
V L "c" 3 172 "int8" `811 
V L "n1" 3 173 "int8" `812 
C L "strxfrm" 3 19 1 "FUNCTION"
C L "memchr" 3 19 3 "FUNCTION"
F N "memchr" 3 201 ""
V L "s" 3 201 "*void" `814 
V L "c" 3 201 "int8" `815 
V L "n" 3 201 "int16" `816 
F G "memchr" 3 202 "*int8(*void s,int8 c,int16 n)" `813 
V L "uc" 3 203 "int8" `817 
V L "su" 3 204 "*int8" `818 
C L "strchr" 3 19 2 "FUNCTION"
F N "strchr" 3 215 ""
V L "s" 3 215 "*int8" `820 
V L "c" 3 215 "int8" `821 
F G "strchr" 3 216 "*int8(*int8 s,int8 c)" `819 
C L "strcspn" 3 19 4 "FUNCTION"
F N "strcspn" 3 227 ""
V L "s1" 3 227 "*int8" `823 
V L "s2" 3 227 "*int8" `824 
F G "strcspn" 3 228 "int16(*int8 s1,*int8 s2)" `822 
V L "sc1" 3 229 "*int8" `825 
V L "sc2" 3 229 "*int8" `826 
C L "strpbrk" 3 19 4 "FUNCTION"
F N "strpbrk" 3 242 ""
V L "s1" 3 242 "*int8" `828 
V L "s2" 3 242 "*int8" `829 
F G "strpbrk" 3 243 "*int8(*int8 s1,*int8 s2)" `827 
V L "sc1" 3 244 "*int8" `830 
V L "sc2" 3 244 "*int8" `831 
C L "strrchr" 3 19 2 "FUNCTION"
F N "strrchr" 3 257 ""
V L "s" 3 257 "*int8" `833 
V L "c" 3 257 "int8" `834 
F G "strrchr" 3 258 "*int8(*int8 s,int8 c)" `832 
V L "p" 3 259 "*int8" `835 
C L "strspn" 3 19 2 "FUNCTION"
F N "strspn" 3 272 ""
V L "s1" 3 272 "*int8" `837 
V L "s2" 3 272 "*int8" `838 
F G "strspn" 3 273 "int16(*int8 s1,*int8 s2)" `836 
V L "sc1" 3 274 "*int8" `839 
V L "sc2" 3 274 "*int8" `840 
C L "strstr" 3 19 6 "FUNCTION"
F N "strstr" 3 291 ""
V L "s1" 3 291 "*int8" `842 
V L "s2" 3 291 "*int8" `843 
F G "strstr" 3 292 "*int8(*int8 s1,*int8 s2)" `841 
V L "s" 3 293 "*int8" `844 
V L "t" 3 293 "*int8" `845 
C L "strlen" 3 19 2 "FUNCTION"
F N "strlen" 3 318 ""
V L "s" 3 318 "*int8" `847 
F G "strlen" 3 319 "int16(*int8 s)" `846 
V L "sc" 3 320 "*int8" `848 
C L "strtok" 3 19 13 "FUNCTION"
F N "strtok" 3 341 ""
V L "s1" 3 341 "*int8" `850 
V L "s2" 3 341 "*int8" `851 
F G "strtok" 3 342 "*int8(*int8 s1,*int8 s2)" `849 
V L "beg" 3 343 "*int8" `852 
V L "end" 3 343 "*int8" `853 
V L "save" 3 344 "*int8" `854 
C L "stricmp" 3 19 6 "FUNCTION"
F N "stricmp" 3 392 ""
V L "s1" 3 392 "*int8" `856 
V L "s2" 3 392 "*int8" `857 
F G "stricmp" 3 393 "sint8(*int8 s1,*int8 s2)" `855 
C L "strlwr" 3 19 3 "FUNCTION"
F N "strlwr" 3 406 ""
V L "s" 3 406 "*int8" `861 
F G "strlwr" 3 407 "*int8(*int8 s)" `860 
V L "p" 3 408 "*int8" `862 
C L "strupr" 3 19 3 "FUNCTION"
F N "strupr" 3 420 ""
V L "s" 3 420 "*int8" `864 
F G "strupr" 3 421 "*int8(*int8 s)" `863 
V L "p" 3 422 "*int8" `865 
D G "LCD_DB4" 6 8 "PIN_A4"
D G "LCD_DB5" 6 9 "PIN_A5"
D G "LCD_DB6" 6 10 "PIN_E0"
D G "LCD_DB7" 6 11 "PIN_E1"
D G "LCD_RS" 6 13 "PIN_A1"
D G "LCD_RW" 6 14 "PIN_A2"
D G "LCD_E" 6 15 "PIN_A3"
D G "USE_RW_PIN" 6 39 "1"
D G "LCD_LINE_1_ADDRESS" 6 43 "0x00"
D G "LCD_LINE_2_ADDRESS" 6 44 "0x40"
D G "LCD_LINE_3_ADDRESS" 6 45 "0x14"
D G "LCD_LINE_4_ADDRESS" 6 46 "0x54"
D G "lcd_type" 6 60 "2" "0=5x7, 1=5x10, 2=2 lines(or more)"
V G "lcd_line" 6 62 "int8" `866 
V G "LCD_INIT_STRING" 6 64 "[4]" `868 
F N "lcd_send_nibble" 6 74 ""
V L "nibble" 6 74 "int8" `871 
F G "lcd_send_nibble" 6 75 "void(int8 nibble)" `870  "Note:  !! converts an integer expression"
C L "lcd_send_nibble" 6 1 1 "FUNCTION"
C L "lcd_read_nibble" 6 1 4 "FUNCTION"
F N "lcd_read_nibble" 6 96 ""
F G "lcd_read_nibble" 6 97 "int8()" `872 
V L "retval" 6 98 "int8" `873  "Create bit variables so that we can easily set"
C L "lcd_read_nibble" 6 1 1 "FUNCTION"
C L "lcd_read_byte" 6 1 1 "FUNCTION"
F N "lcd_read_byte" 6 127 ""
F G "lcd_read_byte" 6 128 "int8()" `878 
V L "low" 6 129 "int8" `879 
V L "high" 6 130 "int8" `880 
C L "lcd_send_byte" 6 1 1 "FUNCTION"
F N "lcd_send_byte" 6 145 ""
V L "address" 6 145 "int8" `882 
V L "n" 6 145 "int8" `883 
F G "lcd_send_byte" 6 146 "void(int8 address,int8 n)" `881 
F N "lcd_init" 6 174 ""
F G "lcd_init" 6 175 "void()" `884 
V L "i" 6 176 "int8" `885 
C L "lcd_init" 6 1 4 "FUNCTION"
C L "lcd_init" 6 1 6 "FUNCTION"
F N "lcd_gotoxy" 6 221 ""
V L "x" 6 221 "int8" `887 
V L "y" 6 221 "int8" `888 
F G "lcd_gotoxy" 6 222 "void(int8 x,int8 y)" `886 
V L "address" 6 223 "int8" `889 
F N "lcd_putc" 6 255 ""
V L "c" 6 255 "int8" `891 
F G "lcd_putc" 6 256 "void(int8 c)" `890 
F N "lcd_getc" 6 281 ""
V L "x" 6 281 "int8" `893 
V L "y" 6 281 "int8" `894 
F G "lcd_getc" 6 282 "int8(int8 x,int8 y)" `892 
V L "value" 6 283 "int8" `895 
C L "lcd_getc" 6 1 1 "FUNCTION"
D G "INTERNAL_EEPROM_UTILITIES" 7 71 ""
D G "INT_EEPROM_ADDRESS" 7 76 "unsigned int16"
D G "INT_EEPROM_DATA_SIZE" 7 86 "unsigned int8"
C L "write_int1_eeprom" 7 2 6 "FUNCTION"
F N "write_int1_eeprom" 7 99 ""
V L "address" 7 99 "int16" `897 
V L "bitPosition" 7 99 "int8" `898 
V L "data" 7 99 "int8" `899 
F G "write_int1_eeprom" 7 100 "void(int16 address,int8 bitPosition,int8 data)" `896 
V L "stored_data" 7 101 "int8" `900 
C L "read_int1_eeprom" 7 2 4 "FUNCTION"
F N "read_int1_eeprom" 7 122 ""
V L "address" 7 122 "int16" `902 
V L "bitPosition" 7 122 "int8" `903 
F G "read_int1_eeprom" 7 123 "int8(int16 address,int8 bitPosition)" `901 
C L "write_int16_eeprom" 7 2 4 "FUNCTION"
F N "write_int16_eeprom" 7 132 ""
V L "address" 7 132 "int16" `905 
V L "data" 7 132 "int16" `906 
F G "write_int16_eeprom" 7 133 "void(int16 address,int16 data)" `904 
V L "i" 7 137 "int8" `907 
C L "read_int16_eeprom" 7 2 3 "FUNCTION"
F N "read_int16_eeprom" 7 150 ""
V L "address" 7 150 "int16" `909 
F G "read_int16_eeprom" 7 151 "int16(int16 address)" `908 
V L "i" 7 155 "int8" `910 
V L "data" 7 156 "int16" `911 
C L "write_int32_eeprom" 7 2 4 "FUNCTION"
F N "write_int32_eeprom" 7 172 ""
V L "address" 7 172 "int16" `913 
V L "data" 7 172 "int32" `914 
F G "write_int32_eeprom" 7 173 "void(int16 address,int32 data)" `912 
V L "i" 7 177 "int8" `915 
C L "read_int32_eeprom" 7 2 3 "FUNCTION"
F N "read_int32_eeprom" 7 188 ""
V L "address" 7 188 "int16" `917 
F G "read_int32_eeprom" 7 189 "int32(int16 address)" `916 
V L "i" 7 193 "int8" `918 
V L "data" 7 194 "int32" `919 
C L "write_float_eeprom" 7 2 4 "FUNCTION"
F N "write_float_eeprom" 7 208 ""
V L "address" 7 208 "int16" `921 
V L "data" 7 208 "float" `922 
F G "write_float_eeprom" 7 209 "void(int16 address,float data)" `920 
V L "i" 7 213 "int8" `923 
C L "read_float_eeprom" 7 2 3 "FUNCTION"
F N "read_float_eeprom" 7 224 ""
V L "address" 7 224 "int16" `925 
F G "read_float_eeprom" 7 225 "float(int16 address)" `924 
V L "data" 7 226 "float" `926 
V L "i" 7 233 "int8" `927 
D G "A1" 0 8 "PIN_D2"
D G "A2" 0 9 "PIN_B1"
D G "B1" 0 10 "PIN_B0"
D G "B2" 0 11 "PIN_C5"
D G "button0" 0 13 "PIN_D5" "select adc or pot"
D G "button1" 0 14 "PIN_D1" "right"
D G "button2" 0 15 "PIN_D0" "left"
D G "button3" 0 16 "PIN_C3" "mid"
D G "button4" 0 17 "PIN_C2" "mode"
D G "button5" 0 18 "PIN_C1" "mode"
D G "proxy_right" 0 20 "PIN_D6"
D G "proxy_left" 0 21 "PIN_D7"
D G "three_dot" 0 23 "0"
D G "swon" 0 24 "1"
D G "swoff" 0 25 "2"
V G "delay_s" 0 28 "int8" `930 
V G "speed" 0 29 "int8" `931 
V G "accel" 0 30 "int8" `932 
V G "accel_value" 0 31 "int8" `933 
V G "c" 0 32 "int8" `934 
V G "mode_auto" 0 34 "int8" `935 
V G "mode_manuel" 0 35 "int8" `936 
V G "flag" 0 36 "int8" `937 
V G "data" 0 38 "int8" `938 
V G "str" 0 39 "int8[8]" `939 
V G "counter" 0 40 "int8" `940 
V G "correct" 0 41 "int8" `941 
V G "quit1" 0 42 "int8" `942 
V G "quit2" 0 43 "int8" `943 
V G "proxy" 0 45 "int8" `944 
V G "control_left" 0 46 "int8" `945 
V G "control_right" 0 47 "int8" `946 
V G "centered" 0 49 "int8" `947 
V G "centercounter" 0 50 "int16" `948 
V G "cc1" 0 51 "int8" `949 
V G "cc2" 0 51 "int8" `950 
V G "center_flag" 0 52 "int8" `951 
V G "step" 0 54 "int16" `952 
V G "step1" 0 55 "int8" `953 
V G "step2" 0 55 "int8" `954 
V G "line1" 0 56 "int8" `955 
V G "linecheck" 0 57 "int8" `956 
V G "threshold" 0 58 "int8" `957 
V G "start" 0 60 "int8" `958 
V G "q" 0 61 "int8" `959 
V G "return_value" 0 62 "int8" `960 
V G "dir" 0 64 "int8" `961 
V G "StartTick" 0 65 "int32" `962 
V G "FinishTick" 0 65 "int32" `963 
V G "CurrentTick" 0 65 "int32" `964 
F N "serial_comm" 0 69 ""
F G "serial_comm" 0 70 "void()" `965  "lcd_putc ("data received: ") ;"
C L "serial_comm" 0 73 2 "FUNCTION"
C L "serial_comm" 0 73 1 "FUNCTION"
C L "serial_comm" 0 73 1 "FUNCTION"
C L "serial_comm" 0 73 3 "FUNCTION"
C L "serial_comm" 0 73 2 "FUNCTION"
F N "delay_func" 0 100 ""
V L "loop" 0 100 "int8" `974 
F G "delay_func" 0 100 "void(int8 loop)" `973  "delay_cycles(200);delay_cycles(200);delay_cycles(200);delay_cycles(200);delay_cycles(200);delay_cycles(250);delay_cycles(200);delay_cycles(200);"
V L "i" 0 104 "int8" `975 
C L "delay_func" 0 73 1 "FUNCTION"
F N "stop" 0 110 ""
F G "stop" 0 110 "void()" `976 
F N "check_right_proxy" 0 118 ""
F G "check_right_proxy" 0 118 "int8()" `977 
F N "check_left_proxy" 0 148 ""
F G "check_left_proxy" 0 148 "int8()" `980 
C L "check_left_proxy" 0 73 1 "FUNCTION"
F N "distance_measure" 0 177 ""
F G "distance_measure" 0 177 "void()" `981 
C L "distance_measure" 0 73 2 "FUNCTION"
C L "distance_measure" 0 73 7 "FUNCTION"
F N "normal" 0 241 ""
F G "normal" 0 241 "void()" `988 
C L "normal" 0 73 43 "FUNCTION"
F N "reverse" 0 307 ""
F G "reverse" 0 307 "void()" `989 
C L "reverse" 0 73 41 "FUNCTION"
F N "acc_start_normal_man" 0 368 ""
F G "acc_start_normal_man" 0 368 "int8()" `990 
V L "i" 0 372 "int8" `991 
V L "j" 0 373 "int8" `992 
F N "acc_start_reverse_man" 0 393 ""
F G "acc_start_reverse_man" 0 393 "int8()" `993 
V L "i" 0 397 "int8" `994 
V L "j" 0 398 "int8" `995 
F N "acc_start_normal_auto" 0 417 ""
F G "acc_start_normal_auto" 0 417 "int8()" `996 
V L "i" 0 420 "int8" `997 
V L "j" 0 421 "int8" `998 
F N "acc_start_reverse_auto" 0 437 ""
F G "acc_start_reverse_auto" 0 437 "int8()" `999 
V L "i" 0 441 "int8" `1000 
V L "j" 0 442 "int8" `1001 
F N "read_serial_speed" 0 458 ""
F G "read_serial_speed" 0 459 "float()" `1002 
F N "centerline" 0 521 ""
V L "delay" 0 521 "int8" `1006 
F G "centerline" 0 521 "void(int8 delay)" `1005 
C L "centerline" 0 73 1 "FUNCTION"
V L "i" 0 609 "int8" `1014 
F N "gogo" 0 618 ""
F G "gogo" 0 618 "void()" `1015 
V L "start" 0 620 "int8" `1016 
V L "i" 0 630 "int8" `1017 
V L "j" 0 631 "int8" `1018 
V L "i" 0 676 "int8" `1019 
V L "j" 0 679 "int8" `1020 
V G "lcd_custom_chars" 0 725 "[1]" `1022  "Char Number 0 -- THREE"
F N "lcd_load_custom_chars" 0 760 ""
F G "lcd_load_custom_chars" 0 761 "void()" `1024 
V L "i" 0 762 "int8" `1025  "Set address counter pointing to CGRAM address 0."
C L "lcd_load_custom_chars" 0 73 2 "FUNCTION"
C L "lcd_load_custom_chars" 0 73 1 "FUNCTION"
F N "Timer1_isr" 0 779 ""
F G "Timer1_isr" 0 780 "void()" `1026  "output_toggle(PIN_D4);"
C L "Timer1_isr" 0 73 1 "FUNCTION"
F N "LOWVOLT_isr" 0 908 ""
F G "LOWVOLT_isr" 0 909 "void()" `1027 
C L "LOWVOLT_isr" 0 73 1 "FUNCTION"
C L "LOWVOLT_isr" 0 73 1 "FUNCTION"
C L "LOWVOLT_isr" 0 73 1 "FUNCTION"
C L "LOWVOLT_isr" 0 73 1 "FUNCTION"
C L "LOWVOLT_isr" 0 73 1 "FUNCTION"
C L "LOWVOLT_isr" 0 73 1 "FUNCTION"
C L "LOWVOLT_isr" 0 73 1 "FUNCTION"
C L "LOWVOLT_isr" 0 73 1 "FUNCTION"
F N "MAIN" 0 947 ""
F G "MAIN" 0 948 "void()" `1028 
C L "MAIN" 0 73 1 "FUNCTION"
C L "MAIN" 0 73 1 "FUNCTION"
C L "MAIN" 0 73 1 "FUNCTION"
C L "MAIN" 0 73 1 "FUNCTION"
C L "MAIN" 0 73 1 "FUNCTION"
C L "MAIN" 0 73 1 "FUNCTION"
C L "MAIN" 0 73 1 "FUNCTION"
C L "MAIN" 0 73 1 "FUNCTION"
C L "MAIN" 0 73 1 "FUNCTION"
C L "MAIN" 0 73 1 "FUNCTION"
C L "MAIN" 0 73 1 "FUNCTION"
C L "MAIN" 0 73 1 "FUNCTION"
C L "MAIN" 0 73 1 "FUNCTION"
C L "MAIN" 0 73 1 "FUNCTION"
C L "MAIN" 0 73 2 "FUNCTION"
V L "i" 0 1027 "int8" `1040 
C L "MAIN" 0 73 1 "FUNCTION"
C L "MAIN" 0 73 1 "FUNCTION"
V L "mode_cursor" 0 1093 "int8" `1052 
V L "mod_flag" 0 1094 "int8" `1053 
C L "MAIN" 0 73 1 "FUNCTION"
C L "MAIN" 0 73 1 "FUNCTION"
C L "MAIN" 0 73 59 "FUNCTION"
C L "MAIN" 0 73 1 "FUNCTION"
C L "MAIN" 0 73 1 "FUNCTION"
V L "i" 0 1451 "int8" `1077 
V L "j" 0 1452 "int8" `1078 
V L "i" 0 1471 "int8" `1079 
V L "j" 0 1472 "int8" `1080 
C L "MAIN" 0 73 1 "FUNCTION"
C L "MAIN" 0 73 1 "FUNCTION"
C L "MAIN" 0 73 1 "FUNCTION"
C L "MAIN" 0 73 1 "FUNCTION"
C L "MAIN" 0 73 1 "FUNCTION"
C L "MAIN" 0 73 1 "FUNCTION"
C L "MAIN" 0 73 1 "FUNCTION"
C L "MAIN" 0 73 1 "FUNCTION"
C L "MAIN" 0 73 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "set_slow_slew_a" 1 0
F B "set_slow_slew_b" 1 0
F B "set_slow_slew_c" 1 0
F B "set_slow_slew_d" 1 0
F B "set_slow_slew_e" 1 0
F B "port_b_pullups" 1 0
F B "port_e_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "set_analog_pins" 0 255
F B "setup_adc_reference" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_timer_4" 3 0
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer_6" 3 0
F B "get_timer6" 0 0
F B "set_timer6" 1 0
F B "setup_timer_5" 1 0
F B "get_timer5" 0 0
F B "set_timer5" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 2
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 2
F B "set_pwm3_duty" 1 0
F B "setup_ccp4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_ccp5" 1 0
F B "set_pwm5_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "get_ticks" 0 1
F B "set_ticks" 1 2
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
